@using System.Net.Http.Json

@inject HttpClient http

@if (authenticationADGroup == null)
{
    <MudText>Loading...</MudText>
}
else
{

    <MudGrid>
        <MudItem xs="12" sm="12" lg="8">
            <MudButton Color="Color.Secondary" OnClick="@ChangeView">@changeButtonLable</MudButton>

        </MudItem>
        <MudItem xs="12" sm="12" lg="4">
            <MudButton Color="Color.Tertiary" OnClick="@ApplyADChanges">Apply Changes</MudButton>

        </MudItem>
    </MudGrid>
    <MudTable T="AuthenticationADGroupModal" Dense="true" Height="@(fixed_header || fixed_footer ?"295px":"")" RowsPerPage="15" Loading="loading" Items="@modal" MultiSelection="true" @bind-SelectedItems="selectedItems1" Hover="@hover">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Selected AD group's members will have Access to the end-point</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="searchString1" Placeholder="Search" OnDebounceIntervalElapsed="Search" DebounceInterval="1" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>

        <RowTemplate>

            <MudTd DataLabel="Name">@context.GroupName</MudTd>

        </RowTemplate>
        <PagerContent>
            <MudTablePager PageSizeOptions="new int[]{9, 18}" />
        </PagerContent>

    </MudTable>







}

@code {
    bool isActiveGrpList = true;
    string changeButtonLable;
    string searchString1;
    private bool hover = true;

    [Parameter] public int? endPointId{ get; set; }
    IEnumerable<AuthenticationADGroupModal> modal = new List<AuthenticationADGroupModal>();
    bool loading;
    HashSet<AuthenticationADGroupModal> selectedItems1 = new HashSet<AuthenticationADGroupModal>();

    [Parameter] public List<AuthenticationADAssignedGroup?>? assignedADgroups { get; set; }
    private IEnumerable<AuthenticationADGroupModal> authenticationADGroup = new List<AuthenticationADGroupModal>();

    bool fixed_header = true;
    bool fixed_footer = true;


    protected override async Task OnInitializedAsync()
    {
        loading = true;
        authenticationADGroup = await http.GetFromJsonAsync<List<AuthenticationADGroupModal>>("api/ActiveDirectoryGroups");
        loading = false;
        try{
            foreach (AuthenticationADAssignedGroup? adG in assignedADgroups)
            {
                Console.WriteLine(adG.ADGroupGuid);
                selectedItems1.Add(authenticationADGroup.Where(a => a.guid == adG.ADGroupGuid).FirstOrDefault());
            }
        }
        catch{

        }
        
        ChangeView();
    }

    void ChangeView()
    {
        isActiveGrpList = !isActiveGrpList;
        if (!isActiveGrpList)
        {
            modal = selectedItems1;
            changeButtonLable = "Show all groups";
        }
        else{
            modal = authenticationADGroup;
            changeButtonLable = "Show Curruntly Allowed Groups";


        }

    }
    async Task Search()
    {
        IEnumerable<AuthenticationADGroupModal> modalbak = new List<AuthenticationADGroupModal>();
        modalbak = modal;
        if(searchString1.Length > 0){
            modal = modalbak.Where(x => x.GroupName.Contains(searchString1, StringComparison.InvariantCultureIgnoreCase));
        }

        Console.WriteLine("test");
    }
    async Task ApplyADChanges()
    {
        HashSet<DataTransferObject.TransferAdGroups> ADGroupDTO = new HashSet<DataTransferObject.TransferAdGroups>();

        foreach(var i in selectedItems1){
            if(i.guid is not null && endPointId is not null){
                ADGroupDTO.Add(new DataTransferObject.TransferAdGroups() { AdGroupGuid = (Guid)i.guid, EndPointId = (int)endPointId });

            }
        }

        var response = await http.PostAsJsonAsync<HashSet<DataTransferObject.TransferAdGroups>>($"api/ActiveDirectoryGroups/BindADGroupsToEndPoints?endpointId={endPointId}", ADGroupDTO);
    }
}
