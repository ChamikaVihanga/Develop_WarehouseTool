// <auto-generated />
using System;
using DataAccessLayer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccessLayer.Migrations
{
    [DbContext(typeof(WorkspaceDbContext))]
    [Migration("20220916163853_Relationship2")]
    partial class Relationship2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("AuthenticationADAssignedGroupAuthenticationClaimRequirement", b =>
                {
                    b.Property<int>("AuthenticationADAssignedGroupsid")
                        .HasColumnType("int");

                    b.Property<int>("authenticationClaimRequirementsRequirementId")
                        .HasColumnType("int");

                    b.HasKey("AuthenticationADAssignedGroupsid", "authenticationClaimRequirementsRequirementId");

                    b.HasIndex("authenticationClaimRequirementsRequirementId");

                    b.ToTable("AuthenticationADAssignedGroupAuthenticationClaimRequirement");
                });

            modelBuilder.Entity("AuthenticationClaimGroupAuthenticationClaimValue", b =>
                {
                    b.Property<int>("AuthenticationClaimGroupsClaimGroupId")
                        .HasColumnType("int");

                    b.Property<int>("AuthenticationClaimValuesClaimValueId")
                        .HasColumnType("int");

                    b.HasKey("AuthenticationClaimGroupsClaimGroupId", "AuthenticationClaimValuesClaimValueId");

                    b.HasIndex("AuthenticationClaimValuesClaimValueId");

                    b.ToTable("AuthenticationClaimGroupAuthenticationClaimValue");
                });

            modelBuilder.Entity("AuthenticationClaimRequirementAuthenticationClaimValue", b =>
                {
                    b.Property<int>("AuthenticationClaimsRequirementsRequirementId")
                        .HasColumnType("int");

                    b.Property<int>("authenticationClaimValuesClaimValueId")
                        .HasColumnType("int");

                    b.HasKey("AuthenticationClaimsRequirementsRequirementId", "authenticationClaimValuesClaimValueId");

                    b.HasIndex("authenticationClaimValuesClaimValueId");

                    b.ToTable("AuthenticationClaimRequirementAuthenticationClaimValue");
                });

            modelBuilder.Entity("AuthenticationClaimValueAuthenticationUserClaimsHolder", b =>
                {
                    b.Property<int>("AuthenticationUserClaimsHoldersUserId")
                        .HasColumnType("int");

                    b.Property<int>("authenticationClaimValuesClaimValueId")
                        .HasColumnType("int");

                    b.HasKey("AuthenticationUserClaimsHoldersUserId", "authenticationClaimValuesClaimValueId");

                    b.HasIndex("authenticationClaimValuesClaimValueId");

                    b.ToTable("AuthenticationClaimValueAuthenticationUserClaimsHolder");
                });

            modelBuilder.Entity("ShiftGroupVS_Employees_1", b =>
                {
                    b.Property<int>("VS_EmployeesId")
                        .HasColumnType("int");

                    b.Property<int>("shiftGroupsId")
                        .HasColumnType("int");

                    b.HasKey("VS_EmployeesId", "shiftGroupsId");

                    b.HasIndex("shiftGroupsId");

                    b.ToTable("ShiftGroupVS_Employees_1");
                });

            modelBuilder.Entity("Workspace.Shared.AuthData.AuthenticationADAssignedGroup", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<Guid>("ADGroupGuid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("id");

                    b.ToTable("AuthenticationADAssignedGroups");
                });

            modelBuilder.Entity("Workspace.Shared.AuthData.AuthenticationClaim", b =>
                {
                    b.Property<int>("ClaimId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClaimId"), 1L, 1);

                    b.Property<string>("Claim")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("ClaimId");

                    b.ToTable("AuthenticationClaims");
                });

            modelBuilder.Entity("Workspace.Shared.AuthData.AuthenticationClaimGroup", b =>
                {
                    b.Property<int>("ClaimGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClaimGroupId"), 1L, 1);

                    b.Property<string>("ClaimGroupName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("ClaimGroupId");

                    b.ToTable("AuthenticationClaimGroups");
                });

            modelBuilder.Entity("Workspace.Shared.AuthData.AuthenticationClaimRequirement", b =>
                {
                    b.Property<int>("RequirementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RequirementId"), 1L, 1);

                    b.Property<int?>("AuthenticationClaimGroupId")
                        .HasColumnType("int");

                    b.Property<int?>("AuthenticationHttpMethodsId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("RequirementName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uri")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("beenReviewed")
                        .HasColumnType("bit");

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RequirementId");

                    b.HasIndex("AuthenticationClaimGroupId");

                    b.HasIndex("AuthenticationHttpMethodsId");

                    b.ToTable("AuthenticationClaimRequirements");
                });

            modelBuilder.Entity("Workspace.Shared.AuthData.AuthenticationClaimValue", b =>
                {
                    b.Property<int>("ClaimValueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClaimValueId"), 1L, 1);

                    b.Property<int?>("AuthenticationClaimId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClaimValueId");

                    b.HasIndex("AuthenticationClaimId");

                    b.ToTable("AuthenticationClaimValues");
                });

            modelBuilder.Entity("Workspace.Shared.AuthData.AuthenticationHttpMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("HttpMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AuthenticationHttpMethods");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            HttpMethod = "GET"
                        },
                        new
                        {
                            Id = 2,
                            HttpMethod = "POST"
                        },
                        new
                        {
                            Id = 3,
                            HttpMethod = "PUT"
                        },
                        new
                        {
                            Id = 4,
                            HttpMethod = "DELETE"
                        },
                        new
                        {
                            Id = 5,
                            HttpMethod = "PATCH"
                        });
                });

            modelBuilder.Entity("Workspace.Shared.AuthData.AuthenticationUserClaimsHolder", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"), 1L, 1);

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("AuthenticationUserClaimsHolders");
                });

            modelBuilder.Entity("Workspace.Shared.Entities.Readonly.SapCostCenter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("SapPlantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SapPlantId");

                    b.ToTable("SapCostCenters");
                });

            modelBuilder.Entity("Workspace.Shared.Entities.Readonly.SapEmployee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmployeeStatus")
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("EpfNo")
                        .HasColumnType("int");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Initials")
                        .HasColumnType("varchar(30)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("JoinDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Location")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("LogonId")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("MaritalStatus")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("NickName")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Position")
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("Rfid")
                        .HasColumnType("int");

                    b.Property<string>("Salutaion")
                        .HasColumnType("varchar(10)");

                    b.Property<int>("SapNo")
                        .HasColumnType("int");

                    b.Property<Guid>("SapOrganizationalUnitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SapPlantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SapWorkContractId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Source")
                        .HasColumnType("varchar(100)");

                    b.Property<Guid?>("WorkContractId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SapOrganizationalUnitId");

                    b.HasIndex("SapPlantId");

                    b.HasIndex("SapWorkContractId");

                    b.ToTable("SapEmployee");
                });

            modelBuilder.Entity("Workspace.Shared.Entities.Readonly.SapOrganizationalUnit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid?>("SapCostCenterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SapCostCenterId");

                    b.ToTable("SapOrganizationalUnits");
                });

            modelBuilder.Entity("Workspace.Shared.Entities.Readonly.SapPlant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SapPlants");
                });

            modelBuilder.Entity("Workspace.Shared.Entities.Readonly.SapWorkContract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("Level")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("SapWorkContracts");
                });

            modelBuilder.Entity("Workspace.Shared.Entities.Readonly.Vs_Employee", b =>
                {
                    b.Property<string>("SAPNo")
                        .HasColumnType("varchar(5)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("BirthDay")
                        .HasColumnType("datetime2");

                    b.Property<string>("CostCenterID")
                        .HasColumnType("varchar(6)");

                    b.Property<string>("CostCenterName")
                        .HasColumnType("varchar(30)");

                    b.Property<string>("CountryCode")
                        .HasColumnType("varchar(4)");

                    b.Property<string>("EPFNo")
                        .HasColumnType("varchar(6)");

                    b.Property<int?>("EmpLevel")
                        .HasColumnType("int");

                    b.Property<string>("EmployeeStatus")
                        .HasColumnType("varchar(30)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("varchar(6)");

                    b.Property<string>("Initials")
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("JoinDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MaritalStatus")
                        .HasColumnType("varchar(7)");

                    b.Property<string>("NickName")
                        .HasColumnType("varchar(30)");

                    b.Property<string>("OrganizationalUnit")
                        .HasColumnType("varchar(40)");

                    b.Property<string>("OrganizationalUnitID")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RFID")
                        .HasColumnType("varchar(8)");

                    b.Property<string>("Religion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Salutation")
                        .HasColumnType("varchar(5)");

                    b.Property<string>("SysUserID")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("WorkContract")
                        .HasColumnType("varchar(50)");

                    b.HasKey("SAPNo");

                    b.ToTable("Vs_Employees", null, t => t.ExcludeFromMigrations());
                });

            modelBuilder.Entity("Workspace.Shared.Entities.ResourceFacilities.ReFaRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("RequestedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RequestedFor")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ReFaRequests");
                });

            modelBuilder.Entity("Workspace.Shared.Entities.SampleApp.SampleTodo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDone")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SampleTodos");
                });

            modelBuilder.Entity("Workspace.Shared.Entities.Warehouse.OperationDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EffectiveDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OperationListId")
                        .HasColumnType("int");

                    b.Property<string>("OrganizationUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Target")
                        .HasColumnType("int");

                    b.Property<string>("TimePeriod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TimeSpan")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OperationListId");

                    b.ToTable("OperationDetails");
                });

            modelBuilder.Entity("Workspace.Shared.Entities.Warehouse.OperationList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OperationLists");
                });

            modelBuilder.Entity("Workspace.Shared.Entities.Warehouse.OperationRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("Achivement")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Efficiency")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("OperationListId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("VS_EmployeesId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OperationListId");

                    b.HasIndex("VS_EmployeesId");

                    b.ToTable("OperationRecords");
                });

            modelBuilder.Entity("Workspace.Shared.Entities.Warehouse.ShiftGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("GroupTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("WorkingShiftId")
                        .HasColumnType("int");

                    b.Property<int?>("WorkingShiftsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WorkingShiftsId");

                    b.ToTable("ShiftGroups");
                });

            modelBuilder.Entity("Workspace.Shared.Entities.Warehouse.VS_Employees_1", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrganizationalUnit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("VS_Employees_1");
                });

            modelBuilder.Entity("Workspace.Shared.Entities.Warehouse.WorkingShifts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ShiftDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShiftTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("WorkingShift");
                });

            modelBuilder.Entity("AuthenticationADAssignedGroupAuthenticationClaimRequirement", b =>
                {
                    b.HasOne("Workspace.Shared.AuthData.AuthenticationADAssignedGroup", null)
                        .WithMany()
                        .HasForeignKey("AuthenticationADAssignedGroupsid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Workspace.Shared.AuthData.AuthenticationClaimRequirement", null)
                        .WithMany()
                        .HasForeignKey("authenticationClaimRequirementsRequirementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AuthenticationClaimGroupAuthenticationClaimValue", b =>
                {
                    b.HasOne("Workspace.Shared.AuthData.AuthenticationClaimGroup", null)
                        .WithMany()
                        .HasForeignKey("AuthenticationClaimGroupsClaimGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Workspace.Shared.AuthData.AuthenticationClaimValue", null)
                        .WithMany()
                        .HasForeignKey("AuthenticationClaimValuesClaimValueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AuthenticationClaimRequirementAuthenticationClaimValue", b =>
                {
                    b.HasOne("Workspace.Shared.AuthData.AuthenticationClaimRequirement", null)
                        .WithMany()
                        .HasForeignKey("AuthenticationClaimsRequirementsRequirementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Workspace.Shared.AuthData.AuthenticationClaimValue", null)
                        .WithMany()
                        .HasForeignKey("authenticationClaimValuesClaimValueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AuthenticationClaimValueAuthenticationUserClaimsHolder", b =>
                {
                    b.HasOne("Workspace.Shared.AuthData.AuthenticationUserClaimsHolder", null)
                        .WithMany()
                        .HasForeignKey("AuthenticationUserClaimsHoldersUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Workspace.Shared.AuthData.AuthenticationClaimValue", null)
                        .WithMany()
                        .HasForeignKey("authenticationClaimValuesClaimValueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ShiftGroupVS_Employees_1", b =>
                {
                    b.HasOne("Workspace.Shared.Entities.Warehouse.VS_Employees_1", null)
                        .WithMany()
                        .HasForeignKey("VS_EmployeesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Workspace.Shared.Entities.Warehouse.ShiftGroup", null)
                        .WithMany()
                        .HasForeignKey("shiftGroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Workspace.Shared.AuthData.AuthenticationClaimRequirement", b =>
                {
                    b.HasOne("Workspace.Shared.AuthData.AuthenticationClaimGroup", "AuthenticationClaimGroup")
                        .WithMany("AuthenticationClaimRequirement")
                        .HasForeignKey("AuthenticationClaimGroupId");

                    b.HasOne("Workspace.Shared.AuthData.AuthenticationHttpMethod", "AuthenticationHttpMethods")
                        .WithMany()
                        .HasForeignKey("AuthenticationHttpMethodsId");

                    b.Navigation("AuthenticationClaimGroup");

                    b.Navigation("AuthenticationHttpMethods");
                });

            modelBuilder.Entity("Workspace.Shared.AuthData.AuthenticationClaimValue", b =>
                {
                    b.HasOne("Workspace.Shared.AuthData.AuthenticationClaim", "AuthenticationClaim")
                        .WithMany("AuthenticationClaimValues")
                        .HasForeignKey("AuthenticationClaimId");

                    b.Navigation("AuthenticationClaim");
                });

            modelBuilder.Entity("Workspace.Shared.Entities.Readonly.SapCostCenter", b =>
                {
                    b.HasOne("Workspace.Shared.Entities.Readonly.SapPlant", "SapPlant")
                        .WithMany("SapCostCenters")
                        .HasForeignKey("SapPlantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SapPlant");
                });

            modelBuilder.Entity("Workspace.Shared.Entities.Readonly.SapEmployee", b =>
                {
                    b.HasOne("Workspace.Shared.Entities.Readonly.SapOrganizationalUnit", "SapOrganizationalUnit")
                        .WithMany("SapEmployees")
                        .HasForeignKey("SapOrganizationalUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Workspace.Shared.Entities.Readonly.SapPlant", "SapPlant")
                        .WithMany()
                        .HasForeignKey("SapPlantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Workspace.Shared.Entities.Readonly.SapWorkContract", "SapWorkContract")
                        .WithMany("SapEmployees")
                        .HasForeignKey("SapWorkContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SapOrganizationalUnit");

                    b.Navigation("SapPlant");

                    b.Navigation("SapWorkContract");
                });

            modelBuilder.Entity("Workspace.Shared.Entities.Readonly.SapOrganizationalUnit", b =>
                {
                    b.HasOne("Workspace.Shared.Entities.Readonly.SapCostCenter", "SapCostCenter")
                        .WithMany("OrganizationalUnits")
                        .HasForeignKey("SapCostCenterId");

                    b.Navigation("SapCostCenter");
                });

            modelBuilder.Entity("Workspace.Shared.Entities.Warehouse.OperationDetail", b =>
                {
                    b.HasOne("Workspace.Shared.Entities.Warehouse.OperationList", "OperationList")
                        .WithMany("OperationDetails")
                        .HasForeignKey("OperationListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OperationList");
                });

            modelBuilder.Entity("Workspace.Shared.Entities.Warehouse.OperationRecord", b =>
                {
                    b.HasOne("Workspace.Shared.Entities.Warehouse.OperationList", "OperationList")
                        .WithMany("OperationRecords")
                        .HasForeignKey("OperationListId");

                    b.HasOne("Workspace.Shared.Entities.Warehouse.VS_Employees_1", "VS_Employees")
                        .WithMany("OperationRecords")
                        .HasForeignKey("VS_EmployeesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OperationList");

                    b.Navigation("VS_Employees");
                });

            modelBuilder.Entity("Workspace.Shared.Entities.Warehouse.ShiftGroup", b =>
                {
                    b.HasOne("Workspace.Shared.Entities.Warehouse.WorkingShifts", "WorkingShifts")
                        .WithMany("ShiftGroups")
                        .HasForeignKey("WorkingShiftsId");

                    b.Navigation("WorkingShifts");
                });

            modelBuilder.Entity("Workspace.Shared.AuthData.AuthenticationClaim", b =>
                {
                    b.Navigation("AuthenticationClaimValues");
                });

            modelBuilder.Entity("Workspace.Shared.AuthData.AuthenticationClaimGroup", b =>
                {
                    b.Navigation("AuthenticationClaimRequirement");
                });

            modelBuilder.Entity("Workspace.Shared.Entities.Readonly.SapCostCenter", b =>
                {
                    b.Navigation("OrganizationalUnits");
                });

            modelBuilder.Entity("Workspace.Shared.Entities.Readonly.SapOrganizationalUnit", b =>
                {
                    b.Navigation("SapEmployees");
                });

            modelBuilder.Entity("Workspace.Shared.Entities.Readonly.SapPlant", b =>
                {
                    b.Navigation("SapCostCenters");
                });

            modelBuilder.Entity("Workspace.Shared.Entities.Readonly.SapWorkContract", b =>
                {
                    b.Navigation("SapEmployees");
                });

            modelBuilder.Entity("Workspace.Shared.Entities.Warehouse.OperationList", b =>
                {
                    b.Navigation("OperationDetails");

                    b.Navigation("OperationRecords");
                });

            modelBuilder.Entity("Workspace.Shared.Entities.Warehouse.VS_Employees_1", b =>
                {
                    b.Navigation("OperationRecords");
                });

            modelBuilder.Entity("Workspace.Shared.Entities.Warehouse.WorkingShifts", b =>
                {
                    b.Navigation("ShiftGroups");
                });
#pragma warning restore 612, 618
        }
    }
}
