@page "/UserManager"
@inject IDialogService DialogService
@inject HttpClient http

<MudText>
    <h2>User Manager</h2>
</MudText>
<MudGrid>
    <MudItem xs="12" sm="5">
        <MudTextField DebounceInterval="5" OnDebounceIntervalElapsed="HandleIntervalElapsed" @bind-Value="User" Label="User Name" Variant="Variant.Text" Clearable="true" Adornment="Adornment.End" AdornmentIcon="@Icons.Outlined.ManageAccounts" AdornmentColor="Color.Primary" Immediate="true" />

    </MudItem>
    <MudItem xs="12" sm="3">
        @if (Users is null)
        {
            <MudProgressCircular Class="mt-5" Color="Color.Primary" Size="Size.Small" Indeterminate="true" />
        }
        else
        {
            if (User is not null)
            {
                if (isNewUser)
                {
                    <MudButton Class="mt-4" OnClick="AddDomainUser" Variant="Variant.Filled">Add USER</MudButton>
                }
                else
                {
                    <MudButton Class="mt-4" OnClick="GetUser" Variant="Variant.Filled">Refresh</MudButton>
                    if (loading)
                    {
                        <MudText>Loging in..</MudText>
                    }
                }
            }


        }


    </MudItem>
    <MudItem xs=12 sm="12">


    </MudItem>
    <MudItem xs="12" sm="12">
        <MudPaper MinHeight="550px" MaxHeight="550px" Class="pa-5 ma-2 overflow-y-auto overflow-x-auto" Elevation="2">
            <MudGrid>
                <MudItem xs="8" sm="8"></MudItem>
                <MudItem xs="4" sm="4">
                    @if (AuthenticationUserClaimsHolder is not null)
                    {
                        @if (_claimValues?.ValueId is not null)
                        {
                            <MudIconButton @onclick="DeleteClaimsFromUsers" Icon="@Icons.Material.Filled.Delete" aria-label="delete"></MudIconButton>

                        }
                        else
                        {
                            <MudIconButton Disabled="true" Icon="@Icons.Material.Filled.Delete" aria-label="delete"></MudIconButton>
                        }
                    }
                    else
                    {
                        
                    }

                </MudItem>
            </MudGrid>
            <CompUserClaimsWithValues claimValue="getClaimValue" AuthenticationUserClaimsHolder="AuthenticationUserClaimsHolder"></CompUserClaimsWithValues>
        </MudPaper>
        @_claimValues?.claimName
        @_claimValues?.Value
    </MudItem>
</MudGrid>


@code {

    public bool isNewUser { get; set; }
    bool loading;
    string? User;
    public AuthenticationUserClaimsHolder? AuthenticationUserClaimsHolder { get; set; }
    public AuthenticationUserClaimsHolder[]? Users { get; set; }

    public DataTransferObject.ClaimValues? _claimValues { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Users = await http.GetFromJsonAsync<AuthenticationUserClaimsHolder[]?>("api/AuthenticationUserClaimHolders/GetUsersList");
        Console.WriteLine("test");


    }
    public async Task AddDomainUser()
    {
        var response = await http.PostAsJsonAsync<AuthenticationUserClaimsHolder>("api/AuthenticationUserClaimHolders/AddDomainUser", new AuthenticationUserClaimsHolder() { UserName = User });
    }
    public async Task GetUser()
    {
        if (User is not null)
        {
            try
            {
                loading = true;
                AuthenticationUserClaimsHolder = await http.GetFromJsonAsync<AuthenticationUserClaimsHolder?>($"api/AuthenticationUserClaimHolders/{User?.ToString()}");
                loading = false;

            }
            catch (Exception ex)
            {
                Console.WriteLine(ex);
            }
        }
    }

    async Task HandleIntervalElapsed(string debouncedText)
    {
        _claimValues = null;
        if (Users.Select(a => a.UserName).Contains(debouncedText.ToLower()))
        {
            isNewUser = false;
            await GetUser();
        }
        else
        {
            isNewUser = true;
            AuthenticationUserClaimsHolder = null;

        }
    }
    void getClaimValue(DataTransferObject.ClaimValues claimValues)
    {
        _claimValues = claimValues;
    }

    async Task DeleteClaimsFromUsers()
    {
        _claimValues.username = User;
        var response = await http.PostAsJsonAsync<DataTransferObject.ClaimValues?>("api/AuthenticationUserClaimHolders/DeleteClaimsFromUsers", _claimValues);
        await GetUser();
    }

}
