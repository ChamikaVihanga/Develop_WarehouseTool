@inject HttpClient http
<MudDialog Class="p-5 m-4">
 
    <DialogContent>
        <MudTextField T="string" @bind-Text="@pathName" OnBlur="Review" Margin="Margin.Dense" Label="Action Name" Variant="Variant.Outlined" Lines="1" />
        <MudAlert Severity="Severity.Normal" NoIcon="true" Class="mb-2 mt-3">@SelectedAuthRequirement?.Uri</MudAlert>
        
    </DialogContent>
    <DialogActions>
        <MudGrid>
            <MudItem xs="12" lg="7" sm="12">
                <MudItem xs="12" lg="12" sm="12">
                    <MudPaper MaxHeight="250px" Elevation="0" Class="overflow-y-auto overflow-x-auto">
                        @if (ClaimIds is not null)
                        {
                            @foreach (ClaimsValues? claimsValues in ClaimIds)
                            {
                                <MudPaper Class="m-4" Elevation="0">
                                    <MudText Class="m-1">@claimsValues?.claimName</MudText>
                                    @foreach (AuthenticationClaimValue AuthenticationClaimValue in SelectedAuthRequirement?.authenticationClaimValues)
                                    {
                                        if (AuthenticationClaimValue.AuthenticationClaimId == claimsValues.ClaimId)
                                        {
                                            <MudChip Color="Color.Default">@AuthenticationClaimValue.Value</MudChip>
                                        }
                                    }
                                </MudPaper>
                            }
                        }
                    </MudPaper>
                </MudItem>
                <MudItem xs="12" lg="12" sm="12">
                    <MudText Class="mt-2"> Select claim requirement to the end-point</MudText>
                    <MudPaper MaxHeight="70vh" Class="mt-2 overflow-y-auto overflow-x-auto" Elevation="0">
                        <CompClaimList claimValue="getClaimValue" AuthenticationClaim="AuthenticationClaim"></CompClaimList>
                    </MudPaper>
                    <MudPaper Class="mt-7" Elevation="0">
                        @if (claimValues?.ClaimId is not null && claimValues.ValueId is not null)
                        {
                            string tooltip = $"Add \"{claimValues.claimName} : {claimValues.Value}\" claim to \"{SelectedAuthRequirement?.Uri}\" End-Point ";
                            <MudTooltip Text="@tooltip" Arrow="true" Placement="Placement.Right">
                                <MudFab Color="Color.Warning" @onclick="(() => addClaimRequirements(new DataTransferObject.ClaimValueDTO{ RequirementId = SelectedAuthRequirement?.RequirementId, ValueId = claimValues.ValueId}))" Disabled="false" StartIcon="@Icons.Material.Filled.Add" Size="Size.Medium" />
                            </MudTooltip>
                        }
                        else
                        {
                            <MudFab Color="Color.Warning" Disabled="true" StartIcon="@Icons.Material.Filled.Add" Size="Size.Small" />

                        }
                    </MudPaper>
                </MudItem>
            </MudItem>
            <MudItem xs="12" lg="5" sm="12">
                <MudItem xs="12" lg="12" sm="12">
                    <MudTextField Class="align-self-end py-4 flex-1" T="string" @bind-Text="@Description" OnBlur="Review" Margin="Margin.Dense" Label="Description" Variant="Variant.Outlined" Lines="4" />

                </MudItem>
                <MudItem xs="12" lg="12" sm="12">
                    <MudPaper MaxHeight="400px" Elevation="0" Class="overflow-y-auto overflow-x-auto">
                    <CompADGroupList></CompADGroupList>

                </MudPaper>
                </MudItem>
            </MudItem>
        </MudGrid>
    </DialogActions>
</MudDialog>

@code {
    string pathName;
    string Description;
    public AuthenticationClaim[]? AuthenticationClaim { get; set; }

    public AuthenticationClaimRequirement? SelectedAuthRequirement { get; set; }
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    [Parameter] public int? SelectedRequirementId { get; set; }
    List<ClaimsValues>? ClaimIds = new List<ClaimsValues>();


    public DataTransferObject.ClaimValues? claimValues { get; set; }


    void Submit() => MudDialog.Close(DialogResult.Ok(true));
    void Cancel() => MudDialog.Cancel();
    protected override async Task OnInitializedAsync()
    {
        await getClaims();
        AuthenticationClaim = await http.GetFromJsonAsync<AuthenticationClaim[]?>("api/AuthenticationClaims");
        pathName = SelectedAuthRequirement.RequirementName;
        Description = SelectedAuthRequirement.description;
    }

    public async Task getClaims()
    {

        if (SelectedRequirementId is not null)
        {
            SelectedAuthRequirement = await http.GetFromJsonAsync<AuthenticationClaimRequirement?>($"api/AuthenticationPolicyRequirement?id={SelectedRequirementId.ToString()}");
            if (SelectedAuthRequirement?.authenticationClaimValues is not null)
            {
                foreach (AuthenticationClaimValue? values in SelectedAuthRequirement.authenticationClaimValues)
                {
                    Console.WriteLine(!ClaimIds.Select(a => a.ClaimId).ToList().Contains(values.AuthenticationClaimId));
                    if (!ClaimIds.Select(a => a.ClaimId).ToList().Contains(values.AuthenticationClaimId))
                    {
                        ClaimIds.Add(new ClaimsValues { ClaimId = values.AuthenticationClaimId, claimName = values.AuthenticationClaim.Claim });
                    }
                }
            }
        }
    }
    void getClaimValue(DataTransferObject.ClaimValues? value)
    {
        claimValues = value;
    }

    async Task addClaimRequirements(DataTransferObject.ClaimValueDTO claimValueDTO)
    {
        var response = await http.PostAsJsonAsync<DataTransferObject.ClaimValueDTO>("api/AuthenticationPolicyRequirement/BindClaimValues", claimValueDTO);

        await getClaims();
    }
    async Task Review(){
        if(pathName != null){

            SelectedAuthRequirement.beenReviewed = true;
        }
        else{
            SelectedAuthRequirement.beenReviewed = false;
        }
        SelectedAuthRequirement.description = Description;
        SelectedAuthRequirement.RequirementName = pathName;
        await http.PutAsJsonAsync<AuthenticationClaimRequirement>($"api/AuthenticationPolicyRequirement/ReviewPath?id={SelectedAuthRequirement?.RequirementId}", SelectedAuthRequirement);
    }

    private class ClaimsValues
    {
        public int? ClaimId { get; set; }
        public string? claimName { get; set; }
    }
}
