@inject NavigationManager NavigationManager
@inject ILocalStorageService LocalStorage
@inject AuthenticationStateProvider AuthStateProvider
@inject HttpClient http


<AuthorizeView>
    <Authorized>
        <MudMenu Icon="@Icons.Filled.AccountCircle" ActivationEvent="@MouseEvent.MouseOver" >
            <ChildContent>
                <MudMenuItem Disabled="true" Style="background-color:lightsteelblue">@context.User.Identity.Name.ToString().ToUpper()</MudMenuItem>
                <MudMenuItem>Profile</MudMenuItem>
                <MudMenuItem>Settings</MudMenuItem>
                <MudMenuItem @onclick="Logout">Sign Out</MudMenuItem>
            </ChildContent>
        </MudMenu>
    </Authorized>
    <NotAuthorized>
        <MudTooltip Text="Login">
            <MudFab Color="Color.Primary" DisableElevation="true" @onclick="Login" Size="Size.Small" StartIcon="@Icons.Filled.Login" />
        </MudTooltip>
    </NotAuthorized>
</AuthorizeView>

@code {

    public bool _isOpen;

    public void ToggleOpen()
    {
        if (_isOpen)
            _isOpen = false;
        else
            _isOpen = true;
    }

    void Login()
    {
        NavigationManager.NavigateTo("login");
    }

    async Task Logout()
    {
        await LocalStorage.RemoveItemAsync("token");
        await AuthStateProvider.GetAuthenticationStateAsync();
        NavigationManager.NavigateTo("/login");

    }
    async Task Refresh()
    {

        var Token = await http.PostAsync("https://auth.workspace.vsag.ch/api/Authentication/refresh-Token", null);
        var token = await Token.Content.ReadAsStringAsync();
        Console.WriteLine(token);
        await LocalStorage.RemoveItemAsync("token");
        await LocalStorage.SetItemAsync("token", token);
        await AuthStateProvider.GetAuthenticationStateAsync();

    }

}