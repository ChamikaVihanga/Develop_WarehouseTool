@page "/warehouse/updateTargetForOperation"
@page "/warehouse/updateTargetForOperation/{id:int}"
@inject IDialogService Dialog
@inject HttpClient Http

<_WarehouseNavBar />

<PageTitle>Update Target</PageTitle>
<br />
<br />
<MudGrid>
    <MudItem xs="3">
        <MudButton StartIcon="@Icons.Filled.KeyboardBackspace" Variant="Variant.Outlined" Color="Color.Info" Style="width:150px" Link="/Warehouse/listsummary">Back</MudButton>
    </MudItem>
    <MudItem xs="6"></MudItem>
    <MudItem xs="3" Class="d-flex justify-end">
        <MudButton Color="Color.Info" Variant="Variant.Outlined" Style="width:230px" OnClick="@((e) => OpenCreateDialog())">Create new update</MudButton>
    </MudItem>
    <MudItem xs="3">
        <MudTextField @bind-Value="organizationName" Label="Organization Unit" ReadOnly="true"></MudTextField>
    </MudItem>
    <MudItem xs="3">
        <MudTextField @bind-Value="name" Label="Operation Name" ReadOnly="true"></MudTextField>
    </MudItem>
    <MudItem xs="3" Class="pa-0">
        <MudTooltip Text="Edit Operation Name" Placement="Placement.Right">
            <MudIconButton Class="mt-6 ml-0" Icon="@Icons.Material.Filled.Input" Color="Color.Primary" @onclick="OpenEditOpNameDialog"></MudIconButton>
        </MudTooltip>
    </MudItem>
    <MudItem xs="12">
        <MudPaper Elevation="1">
            <MudTable Items="updateRecords" Hover="true" SortLabel="Sort By" Elevation="0" Dense="true" Bordered="@borded">
                <HeaderContent>                    
                    <MudTh><b>Create Date</b></MudTh>
                    <MudTh><b>Target</b></MudTh>
                    <MudTh><b>Allocated Time</b></MudTh>
                    <MudTh><b>Effective Month</b></MudTh>
                    <MudTh><b>Created By</b></MudTh>
                    <MudTh></MudTh>
                </HeaderContent>
                <RowTemplate>                    
                    <MudTd>@context.CreateDate.ToString("d")</MudTd>
                    <MudTd>@context.Target</MudTd>
                    <MudTd>@context.TimeSpan @context.TimePeriod</MudTd>
                    <MudTd>@context.EffectiveDate.ToString("yyyy/MMMM")</MudTd>
                    <MudTd>@context.CreatedBy</MudTd>
                    <MudTd>
                        <MudTooltip Text="Edit Target" Placement="Placement.Right">
                            <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" OnClick="@((e) => OpenEditDialog(context.Id))"></MudIconButton>   @*---> get operationDetail id*@
                        </MudTooltip>
                    </MudTd>
                </RowTemplate>
            </MudTable>
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    private bool borded = true;

    [Parameter]                     // <------ get id as a parameter & pass to componant
    public int? id { get; set; }

    public string? name { get; set; }     //  <------- Display operation name

    [Parameter]  
    public string? organizationName { get; set; }    //  <------- Display OrgUnit name

    private OperationDetail[]? updateRecords { get; set; }
    private OperationList? operationList { get; set; }
    private OperationDetail? _getOrganizationUnit { get; set; }

    DialogOptions noHeaderWithScreen = new DialogOptions() { MaxWidth = MaxWidth.ExtraSmall, FullWidth = true, DisableBackdropClick = true, NoHeader = true };
    DialogOptions maxWidthScreen = new DialogOptions() { MaxWidth = MaxWidth.Small, FullWidth = true, DisableBackdropClick = true, CloseButton = true };

    protected override async Task OnInitializedAsync()
    {
        operationList = await Http.GetFromJsonAsync<OperationList>($"api/OperationLists/getOperationName?id={id}");
        name = operationList?.Name;        

        _getOrganizationUnit = await Http.GetFromJsonAsync<OperationDetail>($"api/OperationDetailsAPI/getOnlyOrgUnit?id={id}");
        organizationName = _getOrganizationUnit?.OrganizationUnit;        

        updateRecords = await Http.GetFromJsonAsync<OperationDetail[]>($"api/OperationDetailsAPI/GetListofOpDetails?id={id}");
    }

    private async Task OpenEditOpNameDialog()
    {       
        var parameter = new DialogParameters();
        parameter.Add("id", id);
        var dialog = Dialog.Show<_EditOpListName>("", parameter, noHeaderWithScreen);
        var response = await dialog.Result;                                             //
                                                                                        // when open the Dialog from component after close the Dialog if there is a response came as a Result 
        if(!response.Cancelled){                                                        //  if Result not Cancelled then run the OnInitializedAsync() method.
            await OnInitializedAsync();                                                 // As a result changes will display on time.
        }
    }  

    /// <summary>
    /// id is a property of class so we can directly put in to the methord as a parameters.
    /// </summary>
    private async Task OpenCreateDialog()
    {
        var parameter = new DialogParameters();
        parameter.Add("orgUnit",organizationName);
        parameter.Add("id", id);
        parameter.Add("IsOperationNew", true);       
        var createDialog = Dialog.Show<_EditOperationTable>("Create New Update Form", parameter, maxWidthScreen);
        var responseCreate = await createDialog.Result;

        if(!responseCreate.Cancelled)
        {
            await OnInitializedAsync();
        }
    }
    private async Task OpenEditDialog(int Detailid)
    {
        var parameter = new DialogParameters();
        parameter.Add("orgUnit", organizationName);
        parameter.Add("id", id);
        parameter.Add("datedisable", true);
        parameter.Add("DetailId", Detailid);
        parameter.Add("warnnigMessage", true);
        parameter.Add("selectedDate", true);
        parameter.Add("submitByDate", true);
        var editDialog = Dialog.Show<_EditOperationTable>("Edit Form", parameter, maxWidthScreen);
        var responseEdit = await editDialog.Result;

        if(!responseEdit.Cancelled)
        {
            await OnInitializedAsync();
        }
    }
}
