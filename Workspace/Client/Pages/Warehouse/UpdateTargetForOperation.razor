@page "/warehouse/updateTargetForOperation"
@page "/warehouse/updateTargetForOperation/{id:int}"
@inject IDialogService Dialog
@inject HttpClient Http


<_WarehouseNavBar />

<PageTitle>Update Target</PageTitle>
<br />
<br />
<MudGrid>
    <MudItem xs="3">
        <MudButton StartIcon = "@Icons.Filled.KeyboardBackspace" Variant="Variant.Outlined" Color="Color.Info" Style="width:150px" Link="/Warehouse/listsummary">Back</MudButton>
    </MudItem>
    <MudItem xs="6"></MudItem>
    <MudItem xs="3" Class="d-flex justify-end">
        <MudButton Color="Color.Info" Variant="Variant.Outlined" Style="width:230px" OnClick="@((e) => OpenDialog())">Update Target</MudButton>
    </MudItem>
    @*<MudItem xs="3">       
        <MudTextField T="String" Label="Organization Unit" ></MudTextField>
    </MudItem>*@
    <MudItem xs="3">
        <MudTextField T="String" Label="Operation Name" @bind-Value="name" ReadOnly="true"></MudTextField>
    </MudItem>
    <MudItem xs="12">
        <MudPaper Elevation="1">
            <MudTable Items="updateRecords" Hover="true" SortLabel="Sort By" Elevation="0" Dense="false" Bordered="@borded">
                <HeaderContent>
                    <MudTh><b>Create Date</b></MudTh>
                    <MudTh><b>Target</b></MudTh>
                    <MudTh><b>Allocated Time</b></MudTh>
                    <MudTh><b>Effective Date</b></MudTh>
                    <MudTh><b>Created By</b></MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd>@context.CreateDate.ToString("d")</MudTd>
                    <MudTd>@context.Target</MudTd>
                    <MudTd>@context.TimeSpan @context.TimePeriod</MudTd>
                    <MudTd>@context.EffectiveDate.ToString("d")</MudTd>
                    <MudTd>@context.CreatedBy</MudTd>
                </RowTemplate>
            </MudTable>
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    private bool borded = true;

    [Parameter]                     // <------ get id as a parameter & pass to componant 
    public int? id { get; set; }

    public string? name { get; set; }     //  <------- Display operation name
    public string? OU { get; set; }   //  <------- Display operation name

    private OperationDetail[]? updateRecords { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var list = await Http.GetFromJsonAsync<OperationList>($"api/OperationLists/{id}");
        name = list.Name;
        updateRecords = await Http.GetFromJsonAsync<OperationDetail[]>($"api/OperationDetailsAPI/GetListofOpDetails/{id}");
 
        

    }

    DialogOptions maxWidthScreen = new DialogOptions() { MaxWidth = MaxWidth.Small, FullWidth = true, DisableBackdropClick = true, CloseButton = true };
    /// <summary>
    /// id is a property of class so we can directly put in to the methord as a parameters.  
    /// </summary>
    private void OpenDialog()
    { 
        var parameter = new DialogParameters();
        parameter.Add("id", id);
        Dialog.Show<_EditOperationTable>("Update Form",parameter, maxWidthScreen);
    }

}
