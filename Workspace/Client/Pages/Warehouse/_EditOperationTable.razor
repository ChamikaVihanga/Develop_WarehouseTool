@inject HttpClient http
@inject ISnackbar snackmassagebar
@using Workspace.Shared.Entities.Warehouse


@if (operationList?.Name is not null)
{
    <MudDialog>
        <DialogContent>
            <MudTextField @bind-Value="operationList.Name" Label="Operation Name" ReadOnly="true"></MudTextField>      
            <MudGrid>
                <MudItem xs="3">
                    <MudTextField @bind-Value="operationEdit.Target" Label="Target"></MudTextField>
                </MudItem>
                <MudItem xs="3">
                    <MudTextField @bind-Value="operationEdit.TimeSpan" Label="Time"></MudTextField>
                </MudItem>
                <MudItem xs="6">
                    <MudSelect @bind-Value="operationEdit.TimePeriod" Label="Select a Time Period">
                        <MudSelectItem Value="@("Minutes")" />
                        <MudSelectItem Value="@("Hours")" />
                    </MudSelect>
                </MudItem>
            </MudGrid>
            @*<MudDatePicker PickerVariant="PickerVariant.Dialog"  @ref="_picker" Label="Effective Date">*@ @*@bind-Text="newdate"*@
                @*<PickerActions>
                    <MudButton Variant="Variant.Filled" OnClick="@(() => _picker.Close(false))">Cancel</MudButton>
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(() => _picker.Close())">Ok</MudButton>
                </PickerActions>
            </MudDatePicker>*@

            <MudDatePicker PickerVariant="PickerVariant.Dialog" Label="Effective Month" @ref="_picker" @bind-Date="newdate" OpenTo="OpenTo.Month" FixYear="@DateTime.Today.Year" FixDay="1" DateFormat="yyyy/MMMM"></MudDatePicker>
            <br />
            @*<MudText> Line No: @id</MudText>*@
            <MudGrid>
                <MudItem xs="6"></MudItem>
                <MudItem xs="3" Class="d-flex justify-end">
                    <MudButton Variant="Variant.Filled" Color="Color.Warning" OnClick="Cancel">Cancel</MudButton>
                </MudItem>
                <MudItem xs="3" Class="d-flex justify-end">
                    @if (operationList.Name == null || operationEdit.Target == null || operationEdit.TimeSpan == null || operationEdit.TimePeriod == null || newdate == null || operationEdit.Target == 0 || operationEdit.TimeSpan == 0)
                    {
                        <MudButton Variant="Variant.Filled" Color="Color.Info" OnClick="Submit" Disabled="@datedisable">Ok</MudButton>
                    }
                    else
                    {
                        <MudButton Variant="Variant.Filled" Color="Color.Info" OnClick="Submit" Disabled="false">Ok</MudButton>
                    }
                </MudItem>
            </MudGrid>
        </DialogContent>
    </MudDialog>
}
else
{
    <MudProgressCircular Color="Color.Secondary" Indeterminate="true" />
}

@code {
    DateTime? newdate;

    [Parameter]
    public bool datedisable { get; set; } = true;

    [Parameter]
    public bool IsOperationNew { get; set; }

    MudDatePicker _picker;
    public DateTime? selectedDate { get; set; }

    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    [Parameter] public int id { get; set; }

    void Cancel() => MudDialog.Cancel();

    //private OperationList? List { get; set; }

    //public OperationDetail? operation { get; set; } = new OperationDetail();

    OperationDetail? operationEdit = new OperationDetail();
    //OperationList? _operationList = new OperationList();

    public OperationList? operationList { get; set; }

    //Display primary value --> To line no: 23
    //private string? fixValue { get; set; }

    private async Task Submit()
    {
        if (IsOperationNew)
        {
            operationEdit.OperationListId = id;
            operationEdit.EffectiveDate = (DateTime)newdate;
            operationEdit.CreatedBy = "Unknowen User";
            var newUpdateResponse = await http.PostAsJsonAsync<OperationDetail>("api/OperationDetailsAPI/DetailsOnly", operationEdit);
            MudDialog.Close(DialogResult.Ok(true));

            string streditResponse = newUpdateResponse.Content.ReadAsStringAsync().Result;
            showBar(streditResponse);
        }else{
            //var editResponse = await http.PutAsJsonAsync<OperationList>($"api/OperationLists?id={id}", _operationList);
            showBar("aaaa");
        }
    }
    void showBar(string stringvalue)
    {
        snackmassagebar.Add($"{stringvalue}", Severity.Success, config => { config.ShowCloseIcon = false; });
    }

    protected override async Task OnInitializedAsync()
    {
        operationList = await http.GetFromJsonAsync<OperationList?>($"api/OperationLists/{id}");
    }
}
