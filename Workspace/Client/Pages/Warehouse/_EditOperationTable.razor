@inject HttpClient http
@inject ISnackbar snackmassagebar
@using Workspace.Shared.Entities.Warehouse


@if (operationList?.Name is not null)
{
    <MudDialog>
        <DialogContent>
            <MudTextField @bind-Value="operationList.Name" Label="Operation Name" ReadOnly="true"></MudTextField>
            <MudGrid>
                <MudItem xs="3">
                    <MudTextField @bind-Value="operationEdit.Target" Label="Target"></MudTextField>
                </MudItem>
                <MudItem xs="3">
                    <MudTextField @bind-Value="operationEdit.TimeSpan" Label="Time"></MudTextField>
                </MudItem>
                <MudItem xs="6">
                    <MudSelect @bind-Value="operationEdit.TimePeriod" Label="Select a Time Period">
                        <MudSelectItem Value="@("Minutes")" />
                        <MudSelectItem Value="@("Hours")" />
                    </MudSelect>
                </MudItem>
            </MudGrid>
            @if (selectedDate)
            {
                @if (operationDetail?.EffectiveDate is not null)
                {
                    <MudTextField @bind-Value="operationDetail.EffectiveDate" Label="Effective from this month" ReadOnly="true"></MudTextField>
                }
            }
            else
            {
                <MudDatePicker PickerVariant="PickerVariant.Dialog" Label="Effective Month" @ref="_picker" @bind-Date="newdate" OpenTo="OpenTo.Month" FixYear="@DateTime.Today.Year" FixDay="1" DateFormat="yyyy/MMMM">
                    <PickerActions>
                        <MudButton Class="mr-auto align-self-start" OnClick="@(() => _picker.Clear())">Clear</MudButton>
                        <MudButton OnClick="@(() => _picker.Close(false))">Cancel</MudButton>
                        <MudButton Color="Color.Primary" OnClick="checkDate"><b>OK</b></MudButton>
                    </PickerActions>
                </MudDatePicker>  @* ReadOnly="@datedisable"*@
            }
            @if (warnnigMessage)
            {
                <MudText Class="indigo-text text-accent-4 mt-3"><i>The target of the operation you change, will be effective for the entire month/months</i></MudText>
            }
            <MudGrid Class="mt-2">
                <MudItem xs="6"></MudItem>
                <MudItem xs="3" Class="d-flex justify-end">
                    <MudButton Variant="Variant.Filled" Color="Color.Warning" OnClick="Cancel">Cancel</MudButton>
                </MudItem>
                <MudItem xs="3" Class="d-flex justify-end">
                    @if (submitByDate)
                    {
                        @if (operationDetail.EffectiveDate == null || operationList.Name == null || operationEdit.Target == null || operationEdit.TimeSpan == null || operationEdit.TimePeriod == null  || operationEdit.Target == 0 || operationEdit.TimeSpan == 0)
                        {
                            <MudButton Variant="Variant.Filled" Color="Color.Info" OnClick="Submit" Disabled="true">Ok</MudButton>
                        }
                        else
                        {
                            <MudButton Variant="Variant.Filled" Color="Color.Info" OnClick="Submit" Disabled="false">Ok</MudButton>
                        }
                    }
                    else
                    {
                        @if (operationList.Name == null || operationEdit.Target == null || operationEdit.TimeSpan == null || operationEdit.TimePeriod == null || newdate == null || operationEdit.Target == 0 || operationEdit.TimeSpan == 0)
                        {
                            <MudButton Variant="Variant.Filled" Color="Color.Info" OnClick="Submit" Disabled="true">Ok</MudButton>
                        }
                        else
                        {
                            <MudButton Variant="Variant.Filled" Color="Color.Info" OnClick="Submit" Disabled="false">Ok</MudButton>
                        }
                    }

                </MudItem>
            </MudGrid>
        </DialogContent>
    </MudDialog>
}
else
{
    <MudProgressCircular Color="Color.Secondary" Indeterminate="true" />
}

@code {
    MudDatePicker? _picker;

    public DateTime? newdate { get; set; }
    public DateTime? effectiveMonth { get; set; }

    [CascadingParameter]
    MudDialogInstance? MudDialog { get; set; }

    [Parameter]
    public bool datedisable { get; set; } = false;

    [Parameter]
    public bool warnnigMessage { get; set; } = false;

    [Parameter]
    public bool selectedDate { get; set; } = false;

    [Parameter]
    public bool submitByDate { get; set; } = false;

    [Parameter]
    public bool IsOperationNew { get; set; }

    [Parameter]
    public int id { get; set; }

    [Parameter]
    public int DetailId { get; set; }

    void Cancel() => MudDialog?.Cancel();

    OperationDetail? operationEdit = new OperationDetail();

    public OperationList? operationList { get; set; }
    public OperationDetail? operationDetail { get; set; }

    public async Task checkDate()
    {
        _picker.Close();
    }

    private async Task Submit()
    {
        StateHasChanged();

        if (IsOperationNew)
        {
            operationEdit.OperationListId = id;
            operationEdit.EffectiveDate = (DateTime)newdate;
            operationEdit.CreatedBy = "Unknowen User";
            var newUpdateResponse = await http.PostAsJsonAsync<OperationDetail>("api/OperationDetailsAPI/DetailsOnly", operationEdit);
            MudDialog?.Close(DialogResult.Ok(true));

            string streditResponse = newUpdateResponse.Content.ReadAsStringAsync().Result;
            showBar(streditResponse);
        }
        else
        {
            operationEdit.Id = DetailId;            
            operationEdit.EffectiveDate = operationDetail.EffectiveDate;
            operationEdit.CreatedBy = "User";
            var editResponse = await http.PutAsJsonAsync<OperationDetail>($"api/OperationDetailsAPI?id={DetailId}", operationEdit);
            MudDialog?.Close(DialogResult.Ok(true));
            showBar("Operation target edited successfully");
        }
    }

    void showBar(string stringvalue)
    {
        snackmassagebar.Add($"{stringvalue}", Severity.Success, config => { config.ShowCloseIcon = false; });
    }

    protected override async Task OnInitializedAsync()
    {
        if(selectedDate){
            operationList = await http.GetFromJsonAsync<OperationList?>($"api/OperationLists/getOperationName?id={id}");
            operationDetail = await http.GetFromJsonAsync<OperationDetail?>($"api/OperationDetailsAPI/{DetailId}");
        }else{
            operationList = await http.GetFromJsonAsync<OperationList?>($"api/OperationLists/getOperationName?id={id}");
        }
        
    }
}
