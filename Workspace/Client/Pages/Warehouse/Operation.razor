@page "/warehouse/operation"
@*@inject InterceptorServiceGlobal Interceptor*@
@inject HttpClient http
@inject ISnackbar Snackbar
<_WarehouseNavBar />

<PageTitle>Operation</PageTitle>

<MudGrid>
    <MudItem xs="12" Class="d-flex align-center justify-center mud-width-full py-8">
        <MudItem xs="9">
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h5" Align="Align.Center">New Operation</MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <br />
            <EditForm Model="summeryDTO">
                <DataAnnotationsValidator />
                <MudSelect Label="Select a Organizational Unit" @bind-Value="summeryDTO.OrganizationUnit" AnchorOrigin="Origin.BottomCenter" AdornmentIcon="@Icons.Material.Filled.ArrowDropDown" AdornmentColor="Color.Primary">
                    @if (oganizationUnits is not null)
                    {
                        @foreach (var Name in oganizationUnits)
                        {
                            <MudSelectItem Value="@Name.Name"></MudSelectItem>
                        }
                    }
                </MudSelect>
                <MudTextField @bind-Value="summeryDTO.OperationName" Label="Operation Name" For="@(() => summeryDTO.OperationName)"></MudTextField>
                <MudGrid>
                    <MudItem xs="6">
                        <MudTextField @bind-Value="summeryDTO.Target" Label="Target" For="@(() => summeryDTO.Target)"></MudTextField>
                    </MudItem>
                    <MudItem xs="3">
                        <MudTextField @bind-Value="summeryDTO.AllocatedTime" Label="Time" For="@(() => summeryDTO.AllocatedTime)"></MudTextField>                        
                    </MudItem>
                    <MudItem xs="3">
                        <MudTextField @bind-Value="summeryDTO.TimePeriod" Label="Time Period" Text="@getTimePeriod" ReadOnly="true"></MudTextField>                        
                    </MudItem>
                </MudGrid>
            </EditForm>

            <MudDatePicker PickerVariant="PickerVariant.Dialog" Label="Effective Month" @ref="_picker" @bind-Date="date" OpenTo="OpenTo.Month" FixDay="1" DateFormat="yyyy/MMMM"></MudDatePicker>                   @*FixYear="@DateTime.Today.Year"*@

            <MudItem xs="12" Class="d-flex align-center justify-center mud-width-full py-8">
                <MudButton Class="mx-6 my-4" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.ArrowBack" IconColor="Color.Info" Style="width:150px" Link="/Warehouse/listsummary">Back</MudButton>

                @if (summeryDTO.OperationName == null || date == null || summeryDTO.Target == null || summeryDTO.AllocatedTime == null  || summeryDTO.Target == 0 || summeryDTO.AllocatedTime == 0 || summeryDTO.OrganizationUnit == null)
                {
                    <MudButton Class="mx-6 my-4" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Save" IconColor="Color.Secondary" Style="width:150px" OnClick="PostData" Disabled="true">Add Task</MudButton>
                }
                else
                {
                    <MudButton Class="mx-6 my-4" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Save" IconColor="Color.Secondary" Style="width:150px" OnClick="PostData" Disabled="false">Add Task</MudButton>
                }
            </MudItem>
        </MudItem>
    </MudItem>
</MudGrid>

@*<MudCheckBox @bind-Checked="@ReadOnly" Label="@(ReadOnly ? "Activate" : "Deactivate")" />*@

@code {
    //public bool ReadOnly { get; set; } = true;
    DateTime? date;    
    MudDatePicker _picker;

    string getTimePeriod = "Minutes";

    [Parameter]
    public string id { get; set; }

    [Inject] private IDialogService DialogService { get; set; }

    OperationSummeryDTO summeryDTO = new OperationSummeryDTO();

    public List<OrganizationUnitDTO>? oganizationUnits { get; set; }

    protected override async Task OnInitializedAsync()
    {
        oganizationUnits = await http.GetFromJsonAsync<List<OrganizationUnitDTO>?>("api/EmpTemp/333100/units");
    }    
    
    private async Task PostData()
    {
        summeryDTO.EffectiveDate = (DateTime)date;                 /* <---- If I want to convert to datetime ====> Convert.ToDateTime(date);              (DateTime)date  */
        summeryDTO.TimePeriod = "Minutes";
        //summeryDTO.OrganizationUnit = oganizationUnits.Where(a => a.Name == summeryDTO.OrganizationUnit).Select(b => b.OrganizationUnitID).FirstOrDefault();
        var response = await http.PostAsJsonAsync<OperationSummeryDTO>("api/OperationDetailsAPI", summeryDTO);
        string strResponse = response.Content.ReadAsStringAsync().Result;
        showBar(strResponse);
        summeryDTO.OrganizationUnit = null;
        summeryDTO.OperationName = null;
        summeryDTO.Target = null;
        summeryDTO.AllocatedTime = null;        
        date = null;
    }
    void showBar(string getstringvalue)
    {
        Snackbar.Add($"{getstringvalue}", Severity.Success, config => { config.ShowCloseIcon = false; });
    }
}
