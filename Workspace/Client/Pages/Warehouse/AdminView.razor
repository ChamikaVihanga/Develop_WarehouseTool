@page "/warehouse/adminview"
@using System.ComponentModel.DataAnnotations
@inject HttpClient Http
@inject HttpClient httpClient

<_WarehouseNavBar />
<PageTitle>Admin View</PageTitle>

<MudGrid Class="mt-5">
    <MudItem xs="3">
        <MudDatePicker PickerVariant="PickerVariant.Dialog" Label="Selected Month" @bind-Date="SelectMonth" OpenTo="OpenTo.Month" FixDay="1" DateFormat="yyyy/MMMM"></MudDatePicker>
    </MudItem>

    <MudItem xs="3">
        <MudTextField DebounceInterval="500" OnDebounceIntervalElapsed="HandleIntervalElapsed" @bind-Value="@EnteredSapNo" Label="Enter SAP Number" Adornment="Adornment.End" Variant="Variant.Text" Mask="@(new PatternMask("00000"))" For="@(()=>EnteredSapNo)"></MudTextField>
    </MudItem>   

    <MudItem xs="6">
        @if (ShowEmployeeDetails)
        {
            <MudText Typo="Typo.subtitle1" Align="Align.End" >
                <span>EPFNo : <b>@vS_employee.EPFNo</b></span>
                <span class="ps-5">   Name : <b>@vS_employee.NickName</b></span>
            </MudText>
        }
    </MudItem>
</MudGrid>

<MudItem xs="12" Class="mt-6">
   
    @if (manageRecord != null)
    {
        <MudPaper Elevation="1">
            <MudTable Items="manageRecord" Hover="true" SortLabel="Sort By" Elevation="0" Dense="false" Bordered="@border">
                <HeaderContent>
                    <MudTh><b>Operation Name</b></MudTh>
                    <MudTh><b>Date</b></MudTh>
                    <MudTh><b>Achivement</b></MudTh>
                    <MudTh><b>Target</b></MudTh>
                    <MudTh><b>Efficiency</b></MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd>@context.OperationList.Name</MudTd>
                    <MudTd>@context.StartTime.Date.ToString("d")</MudTd>
                    <MudTd>@context.Achivement</MudTd>
                    <MudTd>@context.OperationList.Warehouse_OperationDetails.Where(a => a.EffectiveDate.Month == context.CreateDate.Month).Select(a => a.Target).FirstOrDefault()</MudTd>
                    @*<MudTd>@context.OperationList.Warehouse_OperationDetails.Select(a => a.Target).FirstOrDefault()</MudTd>*@
                    <MudTd>
                        @(((float)@context.Achivement / (float)@context.OperationList.Warehouse_OperationDetails.Where(a => a.EffectiveDate.Month == context.CreateDate.Month).Select(a => a.Target).FirstOrDefault()) * 100) %
                        @*@calEfficiancy(context.Achivement, context.OperationList.Warehouse_OperationDetails.Where(a =>a.EffectiveDate < context.CreateDate).Select(a => a.Target).FirstOrDefault()).ToString()%*@
                    </MudTd>
                </RowTemplate>
            </MudTable>
        </MudPaper>
    }
</MudItem>

@code {

    //float calEfficiancy(int? ach, int? target)
    //{
    //    try
    //    {
    //        return ((float)ach / (float)target) * 100;
    //    }
    //    catch
    //    {
    //        return 0;
    //    }
    //}

    private bool border = true;
    bool isLoading = false;
    DateTime? SelectMonth = DateTime.Now;
    DateTime? _month;

    [Required]
    [StringLength(5, ErrorMessage = "Number lenght can't be more than 5")]
    public string EnteredSapNo { get; set; }

    public Vs_Employee? vS_employee { get; set; }
    public Warehouse_OperationDetail? operationDetails { get; set; }
    public List<Warehouse_OperationRecord?> manageRecord { get; set; }

    Warehouse_OperationDetail operationDetail = new Warehouse_OperationDetail();

    bool ShowEmployeeDetails { get; set; } = false;  
    
    async Task HandleIntervalElapsed(string debouncedText)
    {
        if (debouncedText.Length > 4)
        {
            isLoading = true;
            try
            {
                vS_employee = await httpClient.GetFromJsonAsync<Vs_Employee?>($"api/Wareouse_Employees/GetEmp?SAP={debouncedText}");
                manageRecord = await httpClient.GetFromJsonAsync<List<Warehouse_OperationRecord?>>($"api/Warehouse_OperationRecords/Efficiency?SapNo={debouncedText}&&SelectMonth={SelectMonth}");
                
                ShowEmployeeDetails = true;
            }
            catch
            {
                isLoading = false;
            }
            isLoading = false;
        }
        else
        {
            ShowEmployeeDetails = false;
            manageRecord = null;            
        }
    }
}
