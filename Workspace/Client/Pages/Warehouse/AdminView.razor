@page "/warehouse/adminview"
@using System.ComponentModel.DataAnnotations
@inject HttpClient Http
@inject HttpClient httpClient

<_WarehouseNavBar />

<PageTitle>Admin View</PageTitle>
<MudGrid>    
    <MudItem>
        <MudAvatar Color="Color.Info" Variant="Variant.Outlined">VS</MudAvatar>
    </MudItem>
    <MudItem xs="3">
        <MudText Typo="Typo.h5" Class="mt-1" Color="Color.Info"><b>Warehouse Efficiency</b></MudText>
    </MudItem>    
</MudGrid>

<MudGrid Class="mt-10">
    <MudItem xs="3">
        <MudDatePicker PickerVariant="PickerVariant.Dialog" Label="Effective Month" @bind-Date="SelectMonth" OpenTo="OpenTo.Month" FixDay="1" DateFormat="yyyy/MMMM"></MudDatePicker>
    </MudItem>

    <MudItem xs="12">
        <MudGrid>
            <MudItem xs="3">
                <MudTextField DebounceInterval="500" OnDebounceIntervalElapsed="HandleIntervalElapsed" @bind-Value="@EnteredSapNo" Label="Enter SAP Number" Adornment="Adornment.End" Variant="Variant.Text" Mask="@(new PatternMask("00000"))" For="@(()=>EnteredSapNo)"></MudTextField>
            </MudItem>
            @*<MudSpacer />*@
            <MudItem xs="9">
                <MudGrid>
                    @if (vS_employee is not null)
                    {                        
                        <MudSpacer/>                        
                        <MudItem xs="6" Class="d-inline-flex justify-end">
                            <MudText Typo="Typo.subtitle1" Class="ml-3" Color="Color.Dark"><span>EPFNo : <b>@vS_employee.EPFNo</b></span><span class="pa-6">Name : <b>@vS_employee.NickName</b></span></MudText>
                        </MudItem>                      
                    }
                </MudGrid>
            </MudItem>
        </MudGrid>
        <br />
    </MudItem>
</MudGrid>

<MudItem xs="12">
    @if (manageRecord == null)
    {
        @* <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />*@
    }
    else
    {
        <MudPaper Elevation="1">
            <MudTable Items="manageRecord" Hover="true" SortLabel="Sort By" Elevation="0" Dense="false" Bordered="@border">
                <HeaderContent>
                    <MudTh><b>Operation Name</b></MudTh>
                    <MudTh><b>Date</b></MudTh>
                    <MudTh><b>Achivement</b></MudTh>
                    <MudTh><b>Target</b></MudTh>
                    <MudTh><b>Efficiency</b></MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd>@context.OperationList.Name</MudTd>
                    <MudTd>@context.StartTime.Date.ToString("d")</MudTd>
                    <MudTd>@context.Achivement</MudTd>
                    <MudTd>@context.OperationList.OperationDetails.Where(a =>a.EffectiveDate < context.CreateDate).Select(a => a.Target).FirstOrDefault()</MudTd>
                    <MudTh>
                        @calEfficiancy(context.Achivement, context.OperationList.OperationDetails.Where(a =>a.EffectiveDate < context.CreateDate).Select(a => a.Target).FirstOrDefault()).ToString()%
                    </MudTh>
                </RowTemplate>
            </MudTable>
        </MudPaper>
    }
</MudItem>

@code {

    float calEfficiancy(int? ach, int? target)
    {
        try
        {           
            return ((float)ach / (float)target) * 100;
        }
        catch
        {
            return 0;
        }
    }

    private bool border = true;
    bool isLoading = false;

    private MudDateRangePicker _picker;

    DateTime? SelectMonth = DateTime.Now;
    DateTime? _month;

    [Required]
    [StringLength(5, ErrorMessage = "Number length can't be more than 5")]
    public string EnteredSapNo { get; set; }

    public Vs_Employee? vS_employee { get; set; }

    public OperationDetail? operationDetails { get; set; }

    private List<OperationRecord?> manageRecord;
    OperationDetail operationDetail = new OperationDetail();

    async Task HandleIntervalElapsed(string debouncedText)
    {

        if (debouncedText.Length > 4)
        {
            isLoading = true;

            try
            {
                vS_employee = await httpClient.GetFromJsonAsync<Vs_Employee?>($"api/EmpTemp/GetEmp?SAP={debouncedText}");

                manageRecord = await httpClient.GetFromJsonAsync<List<OperationRecord?>>($"api/OperationRecords/Efficiency?SapNo={debouncedText}&&SelectMonth={SelectMonth}");
            }
            catch
            {
                isLoading = false;

            }
            isLoading = false;
        }
        else
        {
            manageRecord = null;
            vS_employee.EPFNo = null;
            vS_employee.NickName = null;
        }

    }
}
