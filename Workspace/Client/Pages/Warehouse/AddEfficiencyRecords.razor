@page "/Warehouse"
@using System.ComponentModel.DataAnnotations

@using System.Text.Json
@using static System.Net.WebRequestMethods
@inject ISnackbar Snackbar
@inject HttpClient httpClient

<_WarehouseNavBar />

<MudItem xs="12">
    <MudPaper Elevation="0">
        <MudGrid>
            <MudItem xs="12">
                <MudText><h3>Efficiency</h3></MudText>
            </MudItem>
            <MudItem xs="9">
                @if (isLoading)
                {
                    <MudItem xs="12">
                        <MudPaper Elevation="0" Class="d-flex align-center justify-center mud-width-full">
                            <div style="position:absolute; top:30vh; width:100%; text-align:center">
                                <div style="display:flex; gap:10px; justify-content:center; align-items:center">
                                    <div class="spinner-border" role="status"></div>
                                    Loading...
                                </div>
                            </div>
                        </MudPaper>
                    </MudItem>
                }
                else
                {
                    <MudPaper Elevation="0">

                        <MudItem xs="12">
                            <MudPaper Elevation="0" Class="d-flex align-center justify-center mud-width-full">
                                <MudContainer>
                                    <MudGrid>
                                        <MudItem xs="6">
                                            <MudDatePicker PickerVariant="PickerVariant.Dialog" Variant="Variant.Outlined" @ref="_picker" @bind-Date="SelectedDate" Label="Select Date" Placeholder="Select Date">
                                                <PickerActions>
                                                    <MudButton Variant="Variant.Filled" OnClick="@(() => _picker.Close(false))">Cancel</MudButton>
                                                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(() => _picker.Close())">Ok</MudButton>
                                                </PickerActions>
                                            </MudDatePicker>
                                        </MudItem>
                                        <MudItem xs="6">
                                            <MudTextField DebounceInterval="500" OnDebounceIntervalElapsed="HandleIntervalElapsed" @bind-Value="@EnteredSapNo" Label="Sap Number" Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentIcon="@Icons.Filled.Search" Mask="@(new PatternMask("00000"))" For="@(()=>EnteredSapNo)" />
                                            <MudText Class="mt-3" Color="Color.Error">@warningmessageForSAP</MudText>
                                        </MudItem>
                                    </MudGrid>
                                </MudContainer>
                            </MudPaper>
                        </MudItem>

                        @*Start time and end time picker*@
                        <MudItem xs="12" Class="mt-7">
                            <MudPaper Elevation="0" Class="d-flex align-center justify-center mud-width-full">
                                <MudContainer>
                                    <MudGrid>
                                        <MudItem xs="6">
                                            <MudTimePicker @ref="_pickerS" PickerVariant="PickerVariant.Dialog" Label="Start Time" @bind-Time="@StartTime" Variant="Variant.Outlined">
                                                <PickerActions>
                                                    <MudButton Class="mr-auto align-self-start" OnClick="@(() => _pickerS.Clear())">Clear</MudButton>
                                                    <MudButton OnClick="@(() => _pickerS.Close(false))">Cancel</MudButton>
                                                    <MudButton Color="Color.Primary" OnClick="@(() => _pickerS.Close())">Ok</MudButton>
                                                </PickerActions>
                                            </MudTimePicker>
                                        </MudItem>
                                        <MudItem xs="6">
                                            <MudTimePicker @ref="_pickerE" PickerVariant="PickerVariant.Dialog" Label="End Time" @bind-Time="@EndTime" Variant="Variant.Outlined">
                                                <PickerActions>
                                                    <MudButton Class="mr-auto align-self-start" OnClick="@(() => _pickerE.Clear())">Clear</MudButton>
                                                    <MudButton OnClick="@(() => _pickerE.Close(false))">Cancel</MudButton>
                                                    <MudButton Color="Color.Primary" OnClick="@(() => _pickerE.Close())">Ok</MudButton>
                                                </PickerActions>
                                            </MudTimePicker>
                                        </MudItem>
                                    </MudGrid>
                                </MudContainer>
                            </MudPaper>
                        </MudItem>
                        <MudItem xs="12">
                            <MudPaper Elevation="0" Class="d-flex align-center justify-center mud-width-full">
                                <MudItem xs="6">

                                    @if (isEndDateRequired)
                                    {
                                        <br />
                                        <br />
                                        <MudDatePicker PickerVariant="PickerVariant.Dialog" Variant="Variant.Outlined" @ref="_picker" @bind-Date="EndDate" Label="End Date" Placeholder="Select Date">
                                            <PickerActions>
                                                <MudButton Variant="Variant.Filled" OnClick="@(() => _picker.Close(false))">Cancel</MudButton>
                                                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(() => _picker.Close())">Ok</MudButton>
                                            </PickerActions>
                                        </MudDatePicker>
                                        <br />
                                        <br />
                                    }
                                </MudItem>
                            </MudPaper>
                        </MudItem>
                        
                        @*Operation List add location*@
                        <MudItem xs="12" Class="mt-10">
                            <MudPaper Elevation="0" Class="d-flex align-center justify-center mud-width-full">
                                <MudContainer>
                                    <MudGrid>
                                        <MudItem xs="6">
                                            <MudAutocomplete Label="Operation Name" @bind-Value="value1" SearchFunc="@Search1" ResetValueOnEmptyText="@resetValueOnEmptyText" CoerceText="@coerceText" CoerceValue="@coerceValue" Dense Variant="Variant.Outlined" CloseIcon="@Icons.Material.Filled.Search" />
                                        </MudItem>
                                        <MudItem xs="6">
                                            <MudTextField Label="Achivement" @bind-Value="operationRecord.Achivement" Variant="Variant.Outlined" Mask="@(new PatternMask("0000000"))" />
                                        </MudItem>
                                    </MudGrid>
                                </MudContainer>
                            </MudPaper>
                        </MudItem>

                        @*Buttuion hide and show*@
                        <MudItem xs="12" Class="d-flex align-center justify-center mud-width-full mt-5">
                            @if (EnteredSapNo == null || StartTime == null || value1 == null || isSAPAvailable == false)
                            {
                                <MudButton Variant="Variant.Filled" Color="Color.Info" @onclick="PostData" Disabled="true">Submit</MudButton>
                                <MudAlert Severity="Severity.Info" Class="ml-auto">You must enter Sap Number, Start Time & Operation Name</MudAlert>
                            }
                            else
                            {
                                <MudButton Variant="Variant.Filled" Color="Color.Info" @onclick="PostData">Submit</MudButton>
                            }
                        </MudItem>

                    </MudPaper>
                }
            </MudItem>

            @if (vS_Employee is not null)
            {
                @*Employe View site*@
                string uri = $"http://vssrlsec2/LKTools/assets/img/photos/emp/{vS_Employee.SAPNo}.jpg";
                <MudItem xs="3">
                    <MudContainer>
                        <MudPaper Elevation="0" Class="d-flex align-center justify-center mud-width-full py-8">
                            <MudCard>
                                <MudImage Src="@uri" Width="200" Height="200" Class="rounded-lg ma-4" />
                                <MudCardContent>
                                    <MudText Class="d-flex align-center justify-center mud-width-full"> <b>@vS_Employee.NickName</b> </MudText>
                                    <MudText Class="d-flex align-center justify-center mud-width-full">  @vS_Employee.Position</MudText>
                                </MudCardContent>
                            </MudCard>
                        </MudPaper>
                    </MudContainer>
                </MudItem>
            }
            else
            {
                <MudItem xs="3">
                    <MudContainer>
                        <MudPaper Elevation="0" Class="d-flex align-center justify-center mud-width-full py-8">
                            <MudCard>
                                <MudImage Src="/images/Employee/EmptyVetor.jpg" Width="200" Height="200" Class="rounded-lg ma-4" />
                                <MudCardContent>
                                    <MudText Class="d-flex align-center justify-center mud-width-full"> <b>Name</b> </MudText>
                                    <MudText Class="d-flex align-center justify-center mud-width-full">Position</MudText>
                                </MudCardContent>
                            </MudCard>
                        </MudPaper>
                    </MudContainer>
                </MudItem>
            }
            <MudItem xs="12">
                <h3>Efficiency Summary</h3>
                <MudPaper Elevation="0" Class="d-flex align-center justify-center mud-width-full">
                </MudPaper>
            </MudItem>
        </MudGrid>

        @*Data view table
        <_LogEfficiencyData manageRecord="@manageRecord" />*@
        @if (manageRecord != null)
        {
            <MudPaper Elevation="1">
                <MudTable Items="manageRecord" Bordered="@bordered" Elevation="0" Hover="true">
                    <HeaderContent>
                        <MudTh><b>Date</b></MudTh>
                        <MudTh><b>Operation</b></MudTh>
                        <MudTh><b>TimeSpan</b></MudTh>
                        <MudTh><b>Achivement</b></MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd>@context.CreateDate.ToString("d")</MudTd>
                        <MudTd>@context.OperationList.Name</MudTd>
                        <MudTd>@context.StartTime.ToString("hh:mm tt")  -  @context.EndTime.Value.ToString("hh:mm tt")</MudTd>
                        <MudTd>@context.Achivement</MudTd>
                    </RowTemplate>
                </MudTable>
            </MudPaper>
        }
    </MudPaper>
</MudItem>

@code {
    bool isLoading = false;
    private bool bordered = false;

    /// <summary>
    /// Form Time Picker
    /// </summary>
    TimeSpan? StartTime = null;
    TimeSpan? EndTime = null;
    DateTime? StartDateTime = null;
    bool isEndDateRequired = false;
    bool resetButton = false;

    /// <summary>
    /// Form Date Picker
    /// </summary>
    MudDatePicker? _picker;

    //Time Picker
    MudTimePicker? _pickerS;
    MudTimePicker? _pickerE;
    DateTime? SelectedDate = DateTime.Now;
    DateTime? EndDate = DateTime.Now;

    /// <summary>
    /// Data validation & Employe property
    /// </summary>
    [Required]
    [StringLength(5, ErrorMessage = "Name length can't be more than 5.")]
    public string EnteredSapNo { get; set; }

    private bool isSAPAvailable { get; set; } = true;
    public string warningmessageForSAP { get; set; }
        
    //public DateTime Date { get; set; }

    public int putId { get; set; } = 0;

    private Warehouse_OperationList[]? operationList;
    private string? value1;
    private bool resetValueOnEmptyText;
    private bool coerceText;
    private bool coerceValue;
    //private Warehouse_OperationRecord[]? manageRecord;
    public Warehouse_OperationRecord[]? manageRecord { get; set; }
    private List<Warehouse_OperationDetail>? dropDown;

    public Vs_Employee? vS_Employee { get; set; }

    Warehouse_OperationRecord operationRecord = new Warehouse_OperationRecord();

    void PickEndDate()
    {
        if (StartDateTime != null)
        {
            Console.WriteLine(StartDateTime.Value.Date);
            Console.WriteLine(DateTime.Now.Date);

            if (StartDateTime.Value.Date != DateTime.Now.Date)
            {
                isEndDateRequired = true;
                InvokeAsync(StateHasChanged);
            }
            else
            {
                isEndDateRequired = false;
                InvokeAsync(StateHasChanged);
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        GetOperationList();
    }

    async Task GetOperationList()
    {
        operationList = await httpClient.GetFromJsonAsync<Warehouse_OperationList[]>("api/Warehouse_OperationLists");
        dropDown = await httpClient.GetFromJsonAsync<List<Warehouse_OperationDetail>?>("/api/Warehouse_OperationLists/Active");
    }

    /// <summary>
    /// Date and time convert to String add database
    /// befor clear text box
    /// </summary>
    /// <returns></returns>

    protected async Task PostData()
    {
        operationRecord.CreateDate = Convert.ToDateTime(SelectedDate);
        operationRecord.EndDate = Convert.ToDateTime(EndDate);

        if (EndTime > StartTime || EndTime is null)
        {
            if (StartTime is not null && SelectedDate is not null)
            {
                operationRecord.StartTime = SelectedDate.Value.Date + (TimeSpan)StartTime;
            }
            if (EndTime is not null)
            {
                if (EndDate is not null)
                {
                    operationRecord.EndTime = EndDate.Value.Date + EndTime;
                }
                else
                {
                    operationRecord.EndTime = DateTime.Today + EndTime;
                }
            }
            int id = operationList.Where(a => a.Name == value1).Select(b => b.Id).Last();
            operationRecord.OperationListId = id;
            operationRecord.SAPNo = EnteredSapNo;

            if (putId != 0)
            {
                if (operationRecord.Achivement != null && EndTime != null)
                {
                    operationRecord.Id = putId;
                    var response = await httpClient.PutAsJsonAsync<Warehouse_OperationRecord>($"api/Warehouse_OperationRecords?id={putId}", operationRecord);
                    string Val = await response.Content.ReadAsStringAsync();
                    CleanForm();
                    ShowSuccessfullMessage(Val);
                }
                else
                {
                    ShowErrorMessage("The End Time field or Achivement field required");
                }
            }
            else
            {
                if (operationRecord.Achivement != null && EndTime != null)
                {
                    MethodFor_PostAPI();
                }
                else
                {
                    if (SelectedDate != null && EnteredSapNo != null && StartTime != null && value1 != null && operationRecord.Achivement == null && EndTime == null)
                    {
                        MethodFor_PostAPI();
                    }
                    else
                    {
                        if (SelectedDate != null && EnteredSapNo != null && StartTime != null && value1 != null && operationRecord.Achivement != null && EndTime != null)
                        {
                            MethodFor_PostAPI();
                        }
                        else
                        {
                            ShowErrorMessage("Please confirm the fields and submit it again");
                        }
                    }
                }
            }
        }
        else
        {
            ShowErrorMessage("The End Time must be greater than the Start Time");
        }
    }

    private async Task MethodFor_PostAPI()
    {
        operationRecord.Id = 0;
        var response = await httpClient.PostAsJsonAsync<Warehouse_OperationRecord>("api/Warehouse_OperationRecords", operationRecord);
        string message = await response.Content.ReadAsStringAsync();
        CleanForm();
        ShowSuccessfullMessage(message);
    }

    private void CleanForm()
    {
        vS_Employee = null;
        SelectedDate = DateTime.Today;
        EnteredSapNo = null;
        StartTime = DateTime.Now.TimeOfDay;
        value1 = null;
        operationRecord.Achivement = null;
        manageRecord = null;
        EndTime = null;
        EndDate = null;
        isEndDateRequired = false;
        StartTime = null;
        InvokeAsync(StateHasChanged);
    }

    public void ShowErrorMessage(string VAl)
    {
        Snackbar.Add($"{VAl}", Severity.Error, (check) =>
        {
            check.CloseAfterNavigation = true;
        });
    }

    public void ShowSuccessfullMessage(string Val)
    {
        Snackbar.Add($"{Val}", Severity.Success, (options) =>
        {
            options.CloseAfterNavigation = true;
        });
    }

    private async Task<IEnumerable<string>> Search1(string value)
    {
        // In real life use an asynchronous function for fetching data from an api.
        //await Task.Delay(5);

        // if text is null or empty, show complete list
        if (string.IsNullOrEmpty(value))
            return dropDown.Select(x => x.OperationList.Name);
        return dropDown.Select(y => y.OperationList.Name.ToString()).Where(a => a.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    async Task HandleIntervalElapsed(string debouncedText)
    {
        vS_Employee = null;
        // SelectedDate = DateTime.Today;
        manageRecord = null;
        putId = 0;
        StartTime = DateTime.Now.TimeOfDay;
        EndTime = null;
        EndDate = null;
        isEndDateRequired = false;
        value1 = null;
        operationRecord.Achivement = null;

        if (debouncedText.Length > 4)
        {
            isLoading = true;

            isSAPAvailable = await httpClient.GetFromJsonAsync<bool>($"api/Wareouse_Employees/ValidateSapNumber?EnteredSAP={EnteredSapNo}");

            if (isSAPAvailable)
            {
                warningmessageForSAP = string.Empty;
                try
                {
                    manageRecord = await httpClient.GetFromJsonAsync<Warehouse_OperationRecord[]?>($"api/Warehouse_OperationRecords/Filter?id={debouncedText}&&SelectedDate={SelectedDate.Value.ToString("yyyy-MM-dd")}");

                    vS_Employee = await httpClient.GetFromJsonAsync<Vs_Employee?>($"api/Wareouse_Employees/GetEmp?SAP={debouncedText}");
                }
                catch
                {
                    isLoading = false;
                }
                isLoading = false;

                foreach (Warehouse_OperationRecord operationRecord in manageRecord)
                {
                    if (operationRecord.Achivement is null || operationRecord.EndTime == null)
                    {
                        SelectedDate = operationRecord.CreateDate;
                        StartTime = operationRecord.StartTime.TimeOfDay;
                        StartDateTime = operationRecord.StartTime;
                        value1 = operationRecord.OperationList.Name;
                        putId = operationRecord.Id;
                        manageRecord = manageRecord.Where(x => x.Id != operationRecord.Id).ToArray();
                    }
                }
            }
            else
            {
                isLoading = false;
                warningmessageForSAP = "Please check your SAP Number";
            }
        }
        else
        {
            manageRecord = null;
        }
    }
}