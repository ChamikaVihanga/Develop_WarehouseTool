@page "/Warehouse"
@using System.ComponentModel.DataAnnotations
@using Workspace.Shared.Entities.Warehouse
@using System.Text.Json
@using static System.Net.WebRequestMethods
@inject ISnackbar Snackbar
@inject HttpClient httpClient

<_WarehouseNavBar />

<MudItem xs="12">
    <MudPaper Elevation="0">
        <MudGrid>
            <MudItem xs="12">
                <MudText><h3>Achievements</h3></MudText>
            </MudItem>
            <MudItem xs="9">
                @if (isLoading)
                {
                    <MudItem xs="12">
                        <MudPaper Elevation="0" Class="d-flex align-center justify-center mud-width-full">
                            <div style="position:absolute; top:30vh; width:100%; text-align:center">
                                <h3>Please wait</h3>
                                <div style="display:flex; gap:10px; justify-content:center; align-items:center">
                                    <div class="spinner-border" role="status"></div>
                                    The application is loading...
                                </div>
                            </div>
                        </MudPaper>
                    </MudItem>
                }
                else
                {
                    <MudPaper Elevation="0">

                        <MudItem xs="12">
                            <MudPaper Elevation="0" Class="d-flex align-center justify-center mud-width-full">
                                <MudContainer>
                                    <MudGrid>
                                        <MudItem xs="6">
                                            <MudDatePicker PickerVariant="PickerVariant.Dialog" Variant="Variant.Outlined" @ref="_picker" @bind-Date="SelectedDate" Label="Select Date" Placeholder="Select Date">
                                                <PickerActions>
                                                    <MudButton Variant="Variant.Filled" OnClick="@(() => _picker.Close(false))">Cancel</MudButton>
                                                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(() => _picker.Close())">Ok</MudButton>
                                                </PickerActions>
                                            </MudDatePicker>
                                        </MudItem>
                                        <MudItem xs="6">
                                            <MudTextField DebounceInterval="500" OnDebounceIntervalElapsed="HandleIntervalElapsed" @bind-Value="@EnteredSapNo" Label="Sap Number" Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentIcon="@Icons.Filled.Search" Mask="@(new PatternMask("00000"))" For="@(()=>EnteredSapNo)" Validation="@(new Func<string, IEnumerable<string>>(SapNumberStrength))" />
                                        </MudItem>
                                    </MudGrid>
                                </MudContainer>
                            </MudPaper>
                        </MudItem>

                        <br />
                        <br />

                        @*Start time and end time picker*@
                        <MudItem xs="12">
                            <MudPaper Elevation="0" Class="d-flex align-center justify-center mud-width-full">
                                <MudContainer>
                                    <MudGrid>
                                        <MudItem xs="6">
                                            @*<MudTimePicker @ref="_pickerS" PickerVariant="PickerVariant.Dialog" Label="Start Time" AmPm="true" @bind-Time="@StartTime" Variant="Variant.Outlined">
                                        <PickerActions>
                                        <MudButton Class="mr-auto align-self-start" OnClick="@(() => _pickerS.Clear())">Clear</MudButton>
                                        <MudButton OnClick="@(() => _pickerS.Close(false))">Cancel</MudButton>
                                        <MudButton Color="Color.Primary" OnClick="@(() => _pickerS.Close())">Ok</MudButton>
                                        </PickerActions>
                                        </MudTimePicker>*@
                                            <MudTextField @bind-Value="@StartTime" Label="Start Time" InputType="InputType.Time" Variant="Variant.Outlined" />
                                        </MudItem>
                                        <MudItem xs="6">
                                            @*<MudTimePicker @ref="_pickerE" PickerClosed="PickEndDate" PickerVariant="PickerVariant.Dialog" Label="End Time" AmPm="true" @bind-Time="@EndTime" Variant="Variant.Outlined">
                                        <PickerActions>
                                        <MudButton Class="mr-auto align-self-start" OnClick="@(() => _pickerE.Clear())">Clear</MudButton>
                                        <MudButton OnClick="@(() => _pickerE.Close(false))">Cancel</MudButton>
                                        <MudButton Color="Color.Primary" OnClick="@(() => _pickerE.Close())">Ok</MudButton>
                                        </PickerActions>
                                        </MudTimePicker>*@
                                            <MudTextField @bind-Value="@EndTime" Label="End Time" InputType="InputType.Time" Variant="Variant.Outlined" />
                                        </MudItem>
                                    </MudGrid>
                                </MudContainer>
                            </MudPaper>
                        </MudItem>
                        <MudItem xs="12">
                            <MudPaper Elevation="0" Class="d-flex align-center justify-center mud-width-full">
                                <MudItem xs="6">

                                    @if (isEndDateRequired)
                                    {
                                        <br />
                                        <br />
                                        <MudDatePicker PickerVariant="PickerVariant.Dialog" Variant="Variant.Outlined" @ref="_picker" @bind-Date="EndDate" Label="End Date" Placeholder="Select Date">
                                            <PickerActions>
                                                <MudButton Variant="Variant.Filled" OnClick="@(() => _picker.Close(false))">Cancel</MudButton>
                                                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(() => _picker.Close())">Ok</MudButton>
                                            </PickerActions>
                                        </MudDatePicker>
                                        <br />
                                        <br />
                                    }
                                </MudItem>
                            </MudPaper>
                        </MudItem>
                        <br />
                        <br />
                        @*Operation List add location*@

                        <MudItem xs="12">
                            <MudPaper Elevation="0" Class="d-flex align-center justify-center mud-width-full">
                                <MudContainer>
                                    <MudGrid>
                                        <MudItem xs="6">
                                            <MudAutocomplete Label="Operation Name" @bind-Value="value1" SearchFunc="@Search1" ResetValueOnEmptyText="@resetValueOnEmptyText" CoerceText="@coerceText" CoerceValue="@coerceValue" Dense Variant="Variant.Outlined" />
                                        </MudItem>
                                        <MudItem xs="6">
                                            <MudTextField Label="Acivement" @bind-Value="operationRecord.Achivement" Variant="Variant.Outlined" />
                                        </MudItem>
                                    </MudGrid>
                                </MudContainer>
                            </MudPaper>
                        </MudItem>

                        @*Buttuion hide and show*@

                        <MudItem xs="12" Class="d-flex align-center justify-center mud-width-full mt-5">
                            @if (EnteredSapNo == null || StartTime == null || value1 == null)
                            {
                                <MudButton Variant="Variant.Filled" Color="Color.Info" @onclick="PostData" Disabled="true">Submit</MudButton>
                                <MudAlert Severity="Severity.Error" Class="ml-auto">You must enter sap number, Start Time & Operation Name</MudAlert>
                            }
                            else
                            {
                                <MudButton Variant="Variant.Filled" Color="Color.Info" @onclick="PostData">Submit</MudButton>
                            }
                        </MudItem>

                    </MudPaper>
                }
            </MudItem>

            @if (vS_Employee is not null)
            {
                @*Employe View site*@
                string uri = $"http://vssrlsec2/LKTools/assets/img/photos/emp/{vS_Employee.SAPNo}.jpg";
                <MudItem xs="3">
                    <MudContainer>
                        <MudPaper Elevation="0" Class="d-flex align-center justify-center mud-width-full py-8">
                            <MudCard>
                                <MudImage Src="@uri" Width="200" Height="200" Class="rounded-lg ma-4" />
                                <MudCardContent>
                                    <MudText Class="d-flex align-center justify-center mud-width-full"><b>@vS_Employee.NickName</b></MudText>
                                    <MudText Class="d-flex align-center justify-center mud-width-full">@vS_Employee.Position</MudText>
                                </MudCardContent>
                            </MudCard>
                        </MudPaper>
                    </MudContainer>
                    @*<EmployeeIdentify />*@
                </MudItem>
            }
            <MudItem xs="12">
                <h3>Achievement Summary</h3>
                <MudPaper Elevation="0" Class="d-flex align-center justify-center mud-width-full">
                </MudPaper>
            </MudItem>
        </MudGrid>

        @*Data view table*@
        <_LogEfficiencyData manageRecord="@manageRecord" />
        @*<AdminView manageRecords="@manageRecord" />*@
    </MudPaper>
</MudItem>

@code {
    bool isLoading = false;

    /// <summary>
    /// Form Time Picker
    /// </summary>
    TimeSpan? StartTime = null;
    TimeSpan? EndTime = null;
    DateTime? StartDateTime = null;
    bool isEndDateRequired = false;

    /// <summary>
    /// Form Date Picker
    /// </summary>
    MudDatePicker _picker;

    //Time Picker
    MudTimePicker _pickerS;
    MudTimePicker? _pickerE;
    DateTime? SelectedDate = DateTime.Now;
    DateTime? EndDate = DateTime.Now;

    /// <summary>
    /// Data validation & Employe property
    /// </summary>
    [Required]
    [StringLength(5, ErrorMessage = "Number length can't be more than 5.")]
    public string EnteredSapNo { get; set; }

    private IEnumerable<string> SapNumberStrength(string pw)
    {
        if (string.IsNullOrWhiteSpace(pw))
        {
            yield break;
        }
        if (pw.Length < 5)
            yield return "Number must be at least of length 5";
    }



    public int putId { get; set; } = 0;

    private OperationList[]? operationList;
    private string? value1;
    private bool resetValueOnEmptyText;
    private bool coerceText;
    private bool coerceValue;
    private OperationRecord[]? manageRecord;
    private List<OperationDetail>? dropDown;

    public Vs_Employee? vS_Employee { get; set; }

    OperationRecord operationRecord = new OperationRecord();
    private VS_Employees_1[]? vsEmployees;

    void PickEndDate()
    {
        if (StartDateTime != null)
        {
            Console.WriteLine(StartDateTime.Value.Date);
            Console.WriteLine(DateTime.Now.Date);

            if (StartDateTime.Value.Date != DateTime.Now.Date)
            {
                isEndDateRequired = true;
                InvokeAsync(StateHasChanged);
            }
            else
            {
                isEndDateRequired = false;
                InvokeAsync(StateHasChanged);
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        //operationList = await httpClient.GetFromJsonAsync<OperationList[]>("api/OperationLists");
        GetOperationList();
    }

    async Task GetPerationList()
    {
        operationList = await httpClient.GetFromJsonAsync<OperationList[]>("api/OperationLists");
        dropDown = await httpClient.GetFromJsonAsync<List<OperationDetail>?>("/api/OperationLists/Active");
    }

    /// <summary>
    /// Date and time convert to String add database
    /// befor clear text box
    /// </summary>
    /// <returns></returns>

    protected async Task PostData()
    {
        operationRecord.CreateDate = Convert.ToDateTime(SelectedDate);
        operationRecord.EndDate = Convert.ToDateTime(EndDate);

        //operationRecord.StartTime = Convert.ToDateTime(StartTime);
        if (StartTime is not null && SelectedDate is not null)
        {
            operationRecord.StartTime = SelectedDate.Value.Date + (TimeSpan)StartTime;
        }
        if (EndTime is not null)
        {
            if (EndDate is not null)
            {
                operationRecord.EndTime = EndDate.Value.Date + EndTime;
            }
            else
            {
                operationRecord.EndTime = DateTime.Today + EndTime;
            }
        }

        int id = operationList.Where(a => a.Name == value1).Select(b => b.Id).Last();
        operationRecord.OperationListId = id;
        operationRecord.SAPNo = EnteredSapNo;
        Console.WriteLine(putId);
        if (putId != 0)
        {
            operationRecord.Id = putId;
            var response = await httpClient.PutAsJsonAsync<OperationRecord>($"api/OperationRecords?id={putId}", operationRecord);
            _LogEfficiencyData get = new _LogEfficiencyData();
            string Val = await response.Content.ReadAsStringAsync();
            AddCloseAfterNavSnackbar(Val);
        }
        else
        {
            Console.WriteLine(operationRecord.EndTime);
            var response = await httpClient.PostAsJsonAsync<OperationRecord>("api/OperationRecords", operationRecord);
            _LogEfficiencyData get = new _LogEfficiencyData();
            string Val = await response.Content.ReadAsStringAsync();
            AddCloseAfterNavSnackbar(Val);
        }
        SelectedDate = DateTime.Today;
        EnteredSapNo = null;
        StartTime = DateTime.Now.TimeOfDay;

        value1 = null;
        operationRecord.Achivement = null;
        manageRecord = null;
        EndTime = null;
        EndDate = null;
        isEndDateRequired = false;
        InvokeAsync(StateHasChanged);
    }

    public void AddCloseAfterNavSnackbar(string Val)
    {
        Snackbar.Add($"{Val}", Severity.Success, (options) =>
        {
            options.CloseAfterNavigation = true;
        });
    }


    private async Task<IEnumerable<string>> Search1(string value)
    {
        // In real life use an asynchronous function for fetching data from an api.
        //await Task.Delay(5);

        // if text is null or empty, show complete list
        if (string.IsNullOrEmpty(value))
            return dropDown.Select(x => x.OperationList.Name);
        return dropDown.Select(y => y.OperationList.Name.ToString()).Where(a => a.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    async Task HandleIntervalElapsed(string debouncedText)
    {
        vS_Employee = null;
        // SelectedDate = DateTime.Today;
        manageRecord = null;
        putId = 0;
        StartTime = DateTime.Now.TimeOfDay;
        EndTime = null;
        EndDate = null;
        isEndDateRequired = false;
        value1 = null;
        operationRecord.Achivement = null;

        if (debouncedText.Length > 4)
        {
            isLoading = true;

            try
            {
                manageRecord = await httpClient.GetFromJsonAsync<OperationRecord[]?>($"api/OperationRecords/Filter?id={debouncedText}&&SelectedDate={SelectedDate.Value.ToString("yyyy-MM-dd")}");

                vS_Employee = await httpClient.GetFromJsonAsync<Vs_Employee?>($"api/EmpTemp/GetEmp?SAP={debouncedText}");
            }
            catch
            {
                isLoading = false;

            }
            isLoading = false;


            foreach (OperationRecord operationRecord in manageRecord)
            {
                if (operationRecord.Achivement is null || operationRecord.EndTime == null)
                {
                    SelectedDate = operationRecord.CreateDate;
                    StartTime = operationRecord.StartTime.TimeOfDay;
                    StartDateTime = operationRecord.StartTime;
                    value1 = operationRecord.OperationList.Name;
                    putId = operationRecord.Id;


                    manageRecord = manageRecord.Where(x => x.Id != operationRecord.Id).ToArray();
                }
            }
        }
        else
        {
            manageRecord = null;
        }
    }
}