@page "/Warehouse/ShiftManage"
@using Microsoft.AspNetCore.Components
@inject HttpClient Http
<_WarehouseNavBar />

<MudGrid Class="mt-4">
    <MudItem xs="3">
        <MudDatePicker @ref="_picker" @bind-Date="date" Label="From(Date)">
            <PickerActions>
                <MudButton Class="mr-auto align-self-start" OnClick="@(() => _picker.Clear())">Clear</MudButton>
                <MudButton OnClick="@(() => _picker.Close(false))">Cancel</MudButton>
                <MudButton Color="Color.Primary" OnClick="@(() => _picker.Close())">Ok</MudButton>
            </PickerActions>
        </MudDatePicker>
    </MudItem>
    <MudItem xs="3">
        <MudDatePicker @ref="_secondpicker" Label="To">
            <PickerActions>
                <MudButton Class="mr-auto align-self-start" OnClick="@(() => _secondpicker.Clear())">Clear</MudButton>
                <MudButton OnClick="@(() => _secondpicker.Close(false))">Cancel</MudButton>
                <MudButton Color="Color.Primary" OnClick="@(() => _secondpicker.Close())">Ok</MudButton>
            </PickerActions>
        </MudDatePicker>
    </MudItem>
    <MudItem xs="6"></MudItem>
    <MudItem xs="3">
        <MudSelect @bind-Value="_workingShifts.Id" Label="Working Shifts" Placeholder="Please Select Shift" AnchorOrigin="Origin.BottomCenter" AdornmentIcon="@Icons.Material.Filled.ArrowDropDown" AdornmentColor="Color.Primary" Clearable>

            @if (getWorkingShifts is not null)
            {
                @foreach (var shifttime in getWorkingShifts)
                {
                    <MudSelectItem Value="@shifttime.Id"> @shifttime.ShiftDescription @Convert.ToDateTime(shifttime.StartTime).ToString("t") - @Convert.ToDateTime(shifttime.EndTime).ToString("t")</MudSelectItem>
                }
            }
        </MudSelect>
    </MudItem>
    <MudItem xs="9"></MudItem>
    <MudItem xs="3"><h5>Add Employee</h5></MudItem> 
    <MudItem xs="9"></MudItem>
</MudGrid>
<MudGrid>
    <MudItem xs="3">
        <MudPaper Height="400px" Class="overflow-y-auto overflow-x-hidden mt-10 mud-background-gray pa-4  d-flex flex-column" Elevation="2">            
            @if (isOpen)
            {
                <MudPaper Elevation="25" Class="pa-2 rounded-lg">

                    <MudTextField @bind-Value="SAPNumber" Mask="@(new PatternMask("00000"))" Placeholder="Enter SAP NO:" DisableUnderLine="true" Margin="Margin.Dense" Class="mx-2 mt-n2"></MudTextField>
                    @if (SAPNumber == null)
                    {
                        IsSapNoAvailable = true;
                    }
                    else
                    {
                        IsSapNoAvailable = false;
                    }
                    <MudButton OnClick=@AddEmployee Disabled="IsSapNoAvailable" Size="Size.Small" Color="Color.Info" FullWidth="true" Style="text-transform:none"><b>Add Employee</b></MudButton>

                </MudPaper>
            }
            else
            {
                <MudButton OnClick="@(() => isOpen = !isOpen)" StartIcon="@Icons.Filled.Add" IconColor="Color.Error" FullWidth="true" Class="rounded-lg py-2" Style="text-transform:none">Add Employee</MudButton>
            }

            @foreach (string numberOfEmp in SapList)
            {
                @if (vs_Employee is not null)
                {
                    <MudPaper Elevation="25" Class="pa-4 rounded-1g my-1">@numberOfEmp @vs_Employee.NickName</MudPaper>
                }               
            }
        </MudPaper>
    </MudItem>
    <br />
    <MudItem xs="3">
        <MudPaper Elevation="0" Height="440px" Class="d-flex align-content-space-between flex-wrap flex-grow-1 gap-1">
            @for (int i = 0; i < 15; i++)
            {
                <MudItem xs="3"></MudItem>
            }
            <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Save" IconColor="Color.Success" Size="Size.Medium"><b>Save</b></MudButton>
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    
    MudDatePicker? _picker;
    MudDatePicker? _secondpicker; 
    DateTime? date = DateTime.Today;

    List<string?> SapList = new List<string?>();   

    public string SAPNumber { get; set; }
    public string EmpName { get; set; }
    public Vs_Employee? vs_Employee { get; set; }

    public bool isOpen { get; set; } = false;      

    bool IsSapNoAvailable { get; set; } = false;
    
    Warehouse_WorkingShift _workingShifts = new Warehouse_WorkingShift();
    public List<Warehouse_WorkingShift>? getWorkingShifts { get; set; }

    protected override async Task OnInitializedAsync()
    {
        getWorkingShifts = await Http.GetFromJsonAsync<List<Warehouse_WorkingShift>?>("api/WorkingShifts");
    }

    async Task triggerEnterButon(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await AddEmployee();
        }
    }

    private async Task AddEmployee()
    {
        vs_Employee = await Http.GetFromJsonAsync<Vs_Employee?>($"api/EmpTemp/GetEmp?SAP={SAPNumber}");

        SapList.Add(SAPNumber);        
        SAPNumber = null;
    }   
}